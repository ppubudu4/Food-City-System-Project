/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces.Admin;

import ConnectDB.ConnectDB;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class AEmpAttend extends javax.swing.JPanel {

    /**
     * Creates new form AEmpAttend
     */
    public AEmpAttend() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AEmpAttend_Label_Heading = new javax.swing.JLabel();
        AEmpAttend_Label_EmpID = new javax.swing.JLabel();
        AEmpAttend_Label_Date = new javax.swing.JLabel();
        AEmpAttend_Label_STime = new javax.swing.JLabel();
        AEmpAttend_Spin_STimeHour = new javax.swing.JSpinner();
        AEmpAttend_Spin_STimeMin = new javax.swing.JSpinner();
        AEmpAttend_Spin_STimeAMPM = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        AEmpAttend_Spin_ETimeAMPM = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AEmpAttend_Label_ETime = new javax.swing.JLabel();
        AEmpAttend_Spin_ETimeHour = new javax.swing.JSpinner();
        AEmpAttend_Spin_ETimeMin = new javax.swing.JSpinner();
        AEmpAttend_DateChooser_Date = new com.toedter.calendar.JDateChooser();
        Emp_Scp_3 = new javax.swing.JScrollPane();
        AEmpAttend_Table_EmpAttend = new javax.swing.JTable();
        AEmpAttend_Btn_Ok = new javax.swing.JButton();
        AEmpAttend_Btn_Back = new javax.swing.JButton();
        AEmpAttend_Btn_Add = new javax.swing.JButton();
        AEmpAttend_Btn_RemoveAdded = new javax.swing.JButton();
        AEmpAttend_Btn_AddAll = new javax.swing.JButton();
        Emp_Scp_4 = new javax.swing.JScrollPane();
        AEmpAttend_search_Table_Emp = new javax.swing.JTable();
        AAdvType_EmpID = new javax.swing.JTextField();
        AEmpAttend_search_Label_EmpID_EmpName = new javax.swing.JLabel();
        AAdvType_Search_EmpID_EmpName = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        AEmpAttend_Label_Heading.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        AEmpAttend_Label_Heading.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Label_Heading.setText("Employee Attendent");

        AEmpAttend_Label_EmpID.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Label_EmpID.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Label_EmpID.setText("Employee ID ");

        AEmpAttend_Label_Date.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Label_Date.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Label_Date.setText("Date : ");

        AEmpAttend_Label_STime.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Label_STime.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Label_STime.setText("Start Time : ");

        AEmpAttend_Spin_STimeHour.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Spin_STimeHour.setModel(new javax.swing.SpinnerNumberModel(Byte.valueOf((byte)0), Byte.valueOf((byte)0), Byte.valueOf((byte)12), Byte.valueOf((byte)1)));
        AEmpAttend_Spin_STimeHour.setToolTipText("Start Hour");

        AEmpAttend_Spin_STimeMin.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Spin_STimeMin.setModel(new javax.swing.SpinnerListModel(new String[] {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        AEmpAttend_Spin_STimeMin.setToolTipText("Start Minute");

        AEmpAttend_Spin_STimeAMPM.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Spin_STimeAMPM.setModel(new javax.swing.SpinnerListModel(new String[] {"AM", "PM"}));
        AEmpAttend_Spin_STimeAMPM.setToolTipText("AM / PM");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel1.setText(":");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText(":");

        AEmpAttend_Spin_ETimeAMPM.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Spin_ETimeAMPM.setModel(new javax.swing.SpinnerListModel(new String[] {"AM", "PM"}));
        AEmpAttend_Spin_ETimeAMPM.setToolTipText("AM / PM");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText(":");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText(":");

        AEmpAttend_Label_ETime.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Label_ETime.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Label_ETime.setText("End Time : ");

        AEmpAttend_Spin_ETimeHour.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Spin_ETimeHour.setModel(new javax.swing.SpinnerNumberModel(Byte.valueOf((byte)0), Byte.valueOf((byte)0), Byte.valueOf((byte)12), Byte.valueOf((byte)1)));
        AEmpAttend_Spin_ETimeHour.setToolTipText("End Hour");

        AEmpAttend_Spin_ETimeMin.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Spin_ETimeMin.setModel(new javax.swing.SpinnerListModel(new String[] {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        AEmpAttend_Spin_ETimeMin.setToolTipText("End Minute");

        AEmpAttend_DateChooser_Date.setToolTipText("Date");
        AEmpAttend_DateChooser_Date.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        AEmpAttend_Table_EmpAttend.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_Table_EmpAttend.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Table_EmpAttend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Date", "Start Time", "End Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AEmpAttend_Table_EmpAttend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_Table_EmpAttend.setGridColor(new java.awt.Color(102, 102, 102));
        AEmpAttend_Table_EmpAttend.setIntercellSpacing(new java.awt.Dimension(1, 0));
        AEmpAttend_Table_EmpAttend.setRowHeight(17);
        AEmpAttend_Table_EmpAttend.setSelectionBackground(new java.awt.Color(46, 141, 216));
        AEmpAttend_Table_EmpAttend.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Emp_Scp_3.setViewportView(AEmpAttend_Table_EmpAttend);

        AEmpAttend_Btn_Ok.setBackground(new java.awt.Color(204, 204, 204));
        AEmpAttend_Btn_Ok.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmpAttend_Btn_Ok.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Btn_Ok.setText("Ok");
        AEmpAttend_Btn_Ok.setToolTipText("Ok");
        AEmpAttend_Btn_Ok.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_Btn_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpAttend_Btn_OkActionPerformed(evt);
            }
        });

        AEmpAttend_Btn_Back.setBackground(new java.awt.Color(204, 204, 204));
        AEmpAttend_Btn_Back.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmpAttend_Btn_Back.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Btn_Back.setText("Back");
        AEmpAttend_Btn_Back.setToolTipText("Back");
        AEmpAttend_Btn_Back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_Btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpAttend_Btn_BackActionPerformed(evt);
            }
        });

        AEmpAttend_Btn_Add.setBackground(new java.awt.Color(204, 204, 204));
        AEmpAttend_Btn_Add.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Btn_Add.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Btn_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/Add_plus.png"))); // NOI18N
        AEmpAttend_Btn_Add.setText("Add");
        AEmpAttend_Btn_Add.setToolTipText("Add Employee");
        AEmpAttend_Btn_Add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_Btn_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpAttend_Btn_AddActionPerformed(evt);
            }
        });

        AEmpAttend_Btn_RemoveAdded.setBackground(new java.awt.Color(204, 204, 204));
        AEmpAttend_Btn_RemoveAdded.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Btn_RemoveAdded.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Btn_RemoveAdded.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/trash_bin.png"))); // NOI18N
        AEmpAttend_Btn_RemoveAdded.setText("Remove");
        AEmpAttend_Btn_RemoveAdded.setToolTipText("Remove Added Employee Attendent");
        AEmpAttend_Btn_RemoveAdded.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_Btn_RemoveAdded.setEnabled(false);
        AEmpAttend_Btn_RemoveAdded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpAttend_Btn_RemoveAddedActionPerformed(evt);
            }
        });

        AEmpAttend_Btn_AddAll.setBackground(new java.awt.Color(204, 204, 204));
        AEmpAttend_Btn_AddAll.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_Btn_AddAll.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_Btn_AddAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/check.png"))); // NOI18N
        AEmpAttend_Btn_AddAll.setText("Add All");
        AEmpAttend_Btn_AddAll.setToolTipText("Add All");
        AEmpAttend_Btn_AddAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_Btn_AddAll.setEnabled(false);
        AEmpAttend_Btn_AddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpAttend_Btn_AddAllActionPerformed(evt);
            }
        });

        AEmpAttend_search_Table_Emp.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpAttend_search_Table_Emp.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_search_Table_Emp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Employee Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AEmpAttend_search_Table_Emp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpAttend_search_Table_Emp.setGridColor(new java.awt.Color(102, 102, 102));
        AEmpAttend_search_Table_Emp.setIntercellSpacing(new java.awt.Dimension(1, 0));
        AEmpAttend_search_Table_Emp.setRowHeight(17);
        AEmpAttend_search_Table_Emp.setSelectionBackground(new java.awt.Color(46, 141, 216));
        AEmpAttend_search_Table_Emp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AEmpAttend_search_Table_Emp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AEmpAttend_search_Table_EmpMouseClicked(evt);
            }
        });
        Emp_Scp_4.setViewportView(AEmpAttend_search_Table_Emp);

        AAdvType_EmpID.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AAdvType_EmpID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AAdvType_EmpIDKeyTyped(evt);
            }
        });

        AEmpAttend_search_Label_EmpID_EmpName.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpAttend_search_Label_EmpID_EmpName.setForeground(new java.awt.Color(51, 51, 51));
        AEmpAttend_search_Label_EmpID_EmpName.setText("Employee ID / Name : ");

        AAdvType_Search_EmpID_EmpName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AAdvType_Search_EmpID_EmpName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AAdvType_Search_EmpID_EmpNameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AAdvType_Search_EmpID_EmpNameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AEmpAttend_Label_Heading)
                        .addGap(425, 425, 425))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AEmpAttend_Btn_Back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEmpAttend_Btn_Ok)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Emp_Scp_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(AEmpAttend_search_Label_EmpID_EmpName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AAdvType_Search_EmpID_EmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AEmpAttend_Label_Date)
                            .addComponent(AEmpAttend_Label_EmpID)
                            .addComponent(AEmpAttend_Label_STime)
                            .addComponent(AEmpAttend_Label_ETime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AEmpAttend_Spin_ETimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpAttend_Spin_STimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AEmpAttend_Spin_STimeMin, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpAttend_Spin_ETimeMin, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AEmpAttend_Spin_ETimeAMPM)
                                    .addComponent(AEmpAttend_Spin_STimeAMPM, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(AEmpAttend_DateChooser_Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AAdvType_EmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AEmpAttend_Btn_Add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)))
                .addComponent(Emp_Scp_3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AEmpAttend_Btn_AddAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AEmpAttend_Btn_RemoveAdded))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(AEmpAttend_Label_Heading)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(AEmpAttend_Btn_RemoveAdded)
                        .addGap(114, 114, 114)
                        .addComponent(AEmpAttend_Btn_AddAll, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(AEmpAttend_Label_EmpID)
                                            .addComponent(AAdvType_EmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(10, 10, 10)
                                        .addComponent(AEmpAttend_Label_Date))
                                    .addComponent(AEmpAttend_DateChooser_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpAttend_Label_STime)
                                    .addComponent(AEmpAttend_Spin_STimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpAttend_Spin_STimeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpAttend_Spin_STimeAMPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpAttend_Label_ETime)
                                    .addComponent(AEmpAttend_Spin_ETimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpAttend_Spin_ETimeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpAttend_Spin_ETimeAMPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addComponent(AEmpAttend_Btn_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpAttend_search_Label_EmpID_EmpName)
                                    .addComponent(AAdvType_Search_EmpID_EmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addComponent(Emp_Scp_4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Emp_Scp_3, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmpAttend_Btn_Back)
                    .addComponent(AEmpAttend_Btn_Ok))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AEmpAttend_Btn_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpAttend_Btn_OkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AEmpAttend_Btn_OkActionPerformed

    private void AEmpAttend_Btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpAttend_Btn_BackActionPerformed
        // TODSup_Label_Headingcode here:
    }//GEN-LAST:event_AEmpAttend_Btn_BackActionPerformed

    private void AEmpAttend_Btn_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpAttend_Btn_AddActionPerformed
        AEmpAttend_search_Table_Emp.setRowSelectionAllowed(false);
        if (AAdvType_EmpID.getText().equals("") || AAdvType_EmpID.getText() == null) {
            JOptionPane.showMessageDialog(this, "Plese fill the Employee ID", "", 0);
        } else if (AEmpAttend_DateChooser_Date.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Plese select the date", "", 0);
        } else if (0 == (byte) AEmpAttend_Spin_STimeHour.getValue()) {
            JOptionPane.showMessageDialog(this, "Plese select the start time", "", 0);
        } else if (0 == (byte) AEmpAttend_Spin_ETimeHour.getValue()) {
            JOptionPane.showMessageDialog(this, "Plese select the end time", "", 0);
        } else {

            try {
                ResultSet resEID = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_ID FROM employee WHERE Emp_ID='" + AAdvType_EmpID.getText() + "' AND Emp_Staus='" + 1 + "'");
                if (resEID.next()) {
                    SimpleDateFormat dateFormatter = new SimpleDateFormat("dd MMMM yyyy");
                    ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_ID, Emp_Atten_Date FROM emp_attendent WHERE Emp_ID='" + AAdvType_EmpID.getText() + "' AND Emp_Atten_Date='" + dateFormatter.format(AEmpAttend_DateChooser_Date.getDate()) + "'");
                    if (res.next()) {
                        JOptionPane.showMessageDialog(this, "You already entered this employee's attendent", "", 0);
                        Clear();
                    } else {
                        DefaultTableModel List_EmpAttd = (DefaultTableModel) AEmpAttend_Table_EmpAttend.getModel();
                        if ((int) AEmpAttend_Table_EmpAttend.getRowCount() == 0) {
                            Vector v = new Vector();
                            v.addElement(AAdvType_EmpID.getText());
                            v.addElement(dateFormatter.format(AEmpAttend_DateChooser_Date.getDate()));
                            v.addElement(AEmpAttend_Spin_STimeHour.getValue() + ":" + AEmpAttend_Spin_STimeMin.getValue() + " " + AEmpAttend_Spin_STimeAMPM.getValue());
                            v.addElement(AEmpAttend_Spin_ETimeHour.getValue() + ":" + AEmpAttend_Spin_ETimeMin.getValue() + " " + AEmpAttend_Spin_ETimeAMPM.getValue());
                            List_EmpAttd.addRow(v);
                            Clear();
                        } else {
                            byte x = 0;
                            for (int i = 0; i < List_EmpAttd.getRowCount(); i++) {
                                if (AAdvType_EmpID.getText().equals(AEmpAttend_Table_EmpAttend.getValueAt(i, 0)) && dateFormatter.format(AEmpAttend_DateChooser_Date.getDate()).equals(AEmpAttend_Table_EmpAttend.getValueAt(i, 1))) {
                                    JOptionPane.showMessageDialog(this, "You already entered this employee's attendent", "", 0);
                                    Clear();
                                    x = 1;
                                    break;
                                }
                            }
                            if (x == 0) {
                                Vector v = new Vector();
                                v.addElement(AAdvType_EmpID.getText());
                                v.addElement(dateFormatter.format(AEmpAttend_DateChooser_Date.getDate()));
                                v.addElement(AEmpAttend_Spin_STimeHour.getValue() + ":" + AEmpAttend_Spin_STimeMin.getValue() + " " + AEmpAttend_Spin_STimeAMPM.getValue());
                                v.addElement(AEmpAttend_Spin_ETimeHour.getValue() + ":" + AEmpAttend_Spin_ETimeMin.getValue() + " " + AEmpAttend_Spin_ETimeAMPM.getValue());
                                List_EmpAttd.addRow(v);
                                Clear();
                            }
                            x = 0;
                        }

                        AEmpAttend_Btn_RemoveAdded.setEnabled(true);
                        AEmpAttend_Btn_AddAll.setEnabled(true);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Plese enter a valid ID", "", 0);
                    Clear();
                }
            } catch (Exception ex) {
                ex.printStackTrace();

            }
        }
    }//GEN-LAST:event_AEmpAttend_Btn_AddActionPerformed

    private void AEmpAttend_Btn_RemoveAddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpAttend_Btn_RemoveAddedActionPerformed
        DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmpAttend_Table_EmpAttend.getModel();
        int[] indexes = AEmpAttend_Table_EmpAttend.getSelectedRows();
        int res = 0;
        for (int i = 0; i < indexes.length; i++) {
            res += (i > 0) ? (indexes[i] - indexes[i - 1] - 1) : 0;
            int index = AEmpAttend_Table_EmpAttend.convertColumnIndexToModel(indexes[0] + res);
            AdEdReTblModel.removeRow(index);
        }
        if (AdEdReTblModel.getRowCount() == 0) {
            AEmpAttend_Btn_RemoveAdded.setEnabled(false);
            AEmpAttend_Btn_AddAll.setEnabled(false);
        }
    }//GEN-LAST:event_AEmpAttend_Btn_RemoveAddedActionPerformed

    private void AAdvType_EmpIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AAdvType_EmpIDKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AAdvType_EmpIDKeyTyped

    private void AEmpAttend_search_Table_EmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AEmpAttend_search_Table_EmpMouseClicked
        AEmpAttend_search_Table_Emp.setRowSelectionAllowed(true);
        try {
            ResultSet resE = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_ID FROM employee WHERE Emp_ID='" + (String) AEmpAttend_search_Table_Emp.getValueAt(AEmpAttend_search_Table_Emp.getSelectedRow(), 0) + "'");
            while (resE.next()) {
                AAdvType_EmpID.setText(resE.getString("Emp_ID"));
            }
            AAdvType_Search_EmpID_EmpName.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_AEmpAttend_search_Table_EmpMouseClicked

    private void AAdvType_Search_EmpID_EmpNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AAdvType_Search_EmpID_EmpNameKeyReleased
        DefaultTableModel List_Emp = (DefaultTableModel) AEmpAttend_search_Table_Emp.getModel();
        try {
            if (!(AAdvType_Search_EmpID_EmpName.getText().equals("")) || AAdvType_Search_EmpID_EmpName.getText() == null) {
                List_Emp.setRowCount(0);
                if (Character.isDigit(c)) {
                    ResultSet resEid = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_ID, Emp_FName, Emp_LName FROM employee WHERE Emp_ID LIKE'" + AAdvType_Search_EmpID_EmpName.getText() + "%' AND Emp_Staus='" + 1 + "'");
                    while (resEid.next()) {
                        Vector v = new Vector();
                        v.addElement(resEid.getString("Emp_ID"));
                        v.addElement(resEid.getString("Emp_FName") + " " + resEid.getString("Emp_LName"));
                        List_Emp.addRow(v);
                    }
                }
                if (Character.isLetter(c)) {
                    ResultSet resEname = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_ID, Emp_FName, Emp_LName FROM employee WHERE (Emp_FName LIKE'" + AAdvType_Search_EmpID_EmpName.getText() + "%' OR Emp_LName LIKE'" + AAdvType_Search_EmpID_EmpName.getText() + "%') AND Emp_Staus='" + 1 + "'");
                    while (resEname.next()) {
                        Vector v = new Vector();
                        v.addElement(resEname.getString("Emp_ID"));
                        v.addElement(resEname.getString("Emp_FName") + " " + resEname.getString("Emp_LName"));
                        List_Emp.addRow(v);
                    }
                }
            }
            Clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_AAdvType_Search_EmpID_EmpNameKeyReleased
    private char c = 0;
    private void AAdvType_Search_EmpID_EmpNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AAdvType_Search_EmpID_EmpNameKeyTyped
        if (AAdvType_Search_EmpID_EmpName.getText().length() == 0) {
            c = evt.getKeyChar();
        }
        if (Character.isDigit(c)) {
            if (!Character.isDigit(evt.getKeyChar())) {
                evt.consume();
            }
        } else if (Character.isLetter(c)) {
            if (!Character.isLetter(evt.getKeyChar())) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_AAdvType_Search_EmpID_EmpNameKeyTyped

    private void AEmpAttend_Btn_AddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpAttend_Btn_AddAllActionPerformed
        DefaultTableModel List_EmpAttd = (DefaultTableModel) AEmpAttend_Table_EmpAttend.getModel();
        try {
            for (int i = 0; i < List_EmpAttd.getRowCount(); i++) {
                ConnectDB.DBConnection().createStatement().executeUpdate("INSERT INTO emp_attendent VALUES('" + List_EmpAttd.getValueAt(i, 0) + "', '" + List_EmpAttd.getValueAt(i, 1) + "', '" + List_EmpAttd.getValueAt(i, 2) + "', '" + List_EmpAttd.getValueAt(i, 3) + "')");
            }
            JOptionPane.showMessageDialog(this, "Records added succesfully");
            List_EmpAttd.setRowCount(0);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_AEmpAttend_Btn_AddAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AAdvType_EmpID;
    private javax.swing.JTextField AAdvType_Search_EmpID_EmpName;
    private javax.swing.JButton AEmpAttend_Btn_Add;
    private javax.swing.JButton AEmpAttend_Btn_AddAll;
    private javax.swing.JButton AEmpAttend_Btn_Back;
    private javax.swing.JButton AEmpAttend_Btn_Ok;
    private javax.swing.JButton AEmpAttend_Btn_RemoveAdded;
    private com.toedter.calendar.JDateChooser AEmpAttend_DateChooser_Date;
    private javax.swing.JLabel AEmpAttend_Label_Date;
    private javax.swing.JLabel AEmpAttend_Label_ETime;
    private javax.swing.JLabel AEmpAttend_Label_EmpID;
    private javax.swing.JLabel AEmpAttend_Label_Heading;
    private javax.swing.JLabel AEmpAttend_Label_STime;
    private javax.swing.JSpinner AEmpAttend_Spin_ETimeAMPM;
    private javax.swing.JSpinner AEmpAttend_Spin_ETimeHour;
    private javax.swing.JSpinner AEmpAttend_Spin_ETimeMin;
    private javax.swing.JSpinner AEmpAttend_Spin_STimeAMPM;
    private javax.swing.JSpinner AEmpAttend_Spin_STimeHour;
    private javax.swing.JSpinner AEmpAttend_Spin_STimeMin;
    private javax.swing.JTable AEmpAttend_Table_EmpAttend;
    private javax.swing.JLabel AEmpAttend_search_Label_EmpID_EmpName;
    private javax.swing.JTable AEmpAttend_search_Table_Emp;
    private javax.swing.JScrollPane Emp_Scp_3;
    private javax.swing.JScrollPane Emp_Scp_4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private void Add_Emp_Attend_To_DB() {

        // String Emp_ID = (String) AEmpAttend_CmbBox_EmpID.getSelectedItem();
        String Date = (AEmpAttend_DateChooser_Date.getDate() + "");

        String STime_H = (AEmpAttend_Spin_STimeHour.getValue() + "");
        String STime_M = (AEmpAttend_Spin_STimeMin.getValue() + "");
        String STime_AMPM = (AEmpAttend_Spin_STimeAMPM.getValue() + "");
        String STime = STime_H + " : " + STime_M + " " + STime_AMPM;

        String ETime_H = (AEmpAttend_Spin_ETimeHour.getValue() + "");
        String ETime_M = (AEmpAttend_Spin_ETimeMin.getValue() + "");
        String ETime_AMPM = (AEmpAttend_Spin_ETimeAMPM.getValue() + "");
        String ETime = ETime_H + " : " + ETime_M + " " + ETime_AMPM;

        Connection c = ConnectDB.DBConnection();
        Statement st;

        try {
            st = c.createStatement();
            //st.executeUpdate("INSERT INTO emp_attendent VALUES('" + Emp_ID + "','" + Date + "','" + STime + "','" + ETime + "')");
            JOptionPane.showMessageDialog(this, "Data Insert Successful..!");
            Clear();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "ERROR..!");
        }

    }

    private void Clear() {
        AAdvType_EmpID.setText("");
        AEmpAttend_DateChooser_Date.setDate(null);
        AEmpAttend_Spin_STimeHour.setValue((byte) 0);
        AEmpAttend_Spin_STimeMin.setValue("00");
        AEmpAttend_Spin_STimeAMPM.setValue("AM");
        AEmpAttend_Spin_ETimeHour.setValue((byte) 0);
        AEmpAttend_Spin_ETimeMin.setValue("00");
        AEmpAttend_Spin_ETimeAMPM.setValue("AM");
    }

}
