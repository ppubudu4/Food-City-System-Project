/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces.Admin;

import ConnectDB.ConnectDB;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class AEmp extends javax.swing.JPanel {

    /**
     * Creates new form AEmp
     */
    public AEmp() {
        initComponents();
        set_position_cmbbox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AEmp_AdEd_BtnGroup_Gender = new javax.swing.ButtonGroup();
        AEmp_Label_Heading = new javax.swing.JLabel();
        AEmp_LPane_SearchEmp = new javax.swing.JLayeredPane();
        Emp_Scp_1 = new javax.swing.JScrollPane();
        AEmp_Search_Table_Emp = new javax.swing.JTable();
        AEmp_Search_Label_EmpID = new javax.swing.JLabel();
        AEmp_Search_Label_EmpName = new javax.swing.JLabel();
        AEmp_Search_Btn_ShowAllEmp = new javax.swing.JButton();
        AEmp_Search_TextF_EmpID = new javax.swing.JTextField();
        AEmp_Search_TextF_EmpName = new javax.swing.JTextField();
        AEmp_Search_CheckBox_LeavedEmp = new javax.swing.JCheckBox();
        AEmp_Btn_Ok = new javax.swing.JButton();
        AEmp_Btn_Back = new javax.swing.JButton();
        AEmp_LPane_AdEdReEmp = new javax.swing.JLayeredPane();
        AEmp_AdEdRe_TextF_ContNo = new javax.swing.JTextField();
        AEmp_AdEdRe_Label_ContNo = new javax.swing.JLabel();
        AEmp_AdEdRe_RBtn_GendFemale = new javax.swing.JRadioButton();
        AEmp_AdEdRe_RBtn_GendMale = new javax.swing.JRadioButton();
        AEmp_AdEdRe_Label_Gender = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_AccesLevel = new javax.swing.JLabel();
        AEmp_AdEdRe_CmbBox_AccesLevel = new javax.swing.JComboBox<>();
        AEmp_AdEdRe_Label_Position = new javax.swing.JLabel();
        AEmp_AdEdRe_CmbBox_Position = new javax.swing.JComboBox<>();
        AEmp_AdEdRe_TextF_EmpID = new javax.swing.JTextField();
        AEmp_AdEdRe_TextF_FName = new javax.swing.JTextField();
        AEmp_AdEdRe_TextF_Address_1 = new javax.swing.JTextField();
        AEmp_AdEdRe_TextF_Address_2 = new javax.swing.JTextField();
        AEmp_AdEdRe_Label_Address_2 = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_EmpID = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_EmpFName = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_Address_1 = new javax.swing.JLabel();
        AEmp_AdEdRe_DateChooser_DOB = new com.toedter.calendar.JDateChooser();
        AEmp_AdEdRe_TextF_LName = new javax.swing.JTextField();
        AEmp_AdEdRe_TextF_NICno = new javax.swing.JTextField();
        AEmp_AdEdRe_Label_EmpLName = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_EmpLNICno = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_DOB = new javax.swing.JLabel();
        AEmp_AdEdRe_Label_Email = new javax.swing.JLabel();
        AEmp_AdEdRe_TextF_Email = new javax.swing.JTextField();
        AEmp_AdEdRe_Btn_AddEmp = new javax.swing.JButton();
        AEmp_AdEdRe_Btn_EditEmp = new javax.swing.JButton();
        AEmp_AdEdRe_Btn_RemoveEmp = new javax.swing.JButton();
        Emp_Scp_2 = new javax.swing.JScrollPane();
        AEmp_AdEdRe_Table_Emp = new javax.swing.JTable();
        AEmp_AdEdRe_Btn_RemoveAdded = new javax.swing.JButton();
        AEmp_AdEdRe_Btn_AddAll = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        AEmp_AdEd_BtnGroup_Gender.add(AEmp_AdEdRe_RBtn_GendMale);
        AEmp_AdEd_BtnGroup_Gender.add(AEmp_AdEdRe_RBtn_GendFemale);

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        AEmp_Label_Heading.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        AEmp_Label_Heading.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Label_Heading.setText("Employee");

        AEmp_LPane_SearchEmp.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Search Employee", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 11), new java.awt.Color(104, 2, 5))); // NOI18N
        AEmp_LPane_SearchEmp.setPreferredSize(new java.awt.Dimension(1052, 216));
        AEmp_LPane_SearchEmp.setVerifyInputWhenFocusTarget(false);

        AEmp_Search_Table_Emp.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_Search_Table_Emp.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Search_Table_Emp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "NIC No", "Gender", "Address 1", "Address 2", "Date of Birth", "Contact No", "E-mail", "Access Level", "Position", "Joined Date", "Leave Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AEmp_Search_Table_Emp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_Search_Table_Emp.setGridColor(new java.awt.Color(102, 102, 102));
        AEmp_Search_Table_Emp.setIntercellSpacing(new java.awt.Dimension(1, 0));
        AEmp_Search_Table_Emp.setRowHeight(17);
        AEmp_Search_Table_Emp.setSelectionBackground(new java.awt.Color(46, 141, 216));
        AEmp_Search_Table_Emp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AEmp_Search_Table_Emp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AEmp_Search_Table_EmpMouseClicked(evt);
            }
        });
        Emp_Scp_1.setViewportView(AEmp_Search_Table_Emp);

        AEmp_Search_Label_EmpID.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_Search_Label_EmpID.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Search_Label_EmpID.setText("Employee ID : ");

        AEmp_Search_Label_EmpName.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_Search_Label_EmpName.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Search_Label_EmpName.setText("Name : ");

        AEmp_Search_Btn_ShowAllEmp.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_Search_Btn_ShowAllEmp.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmp_Search_Btn_ShowAllEmp.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Search_Btn_ShowAllEmp.setText("Show All Employees");
        AEmp_Search_Btn_ShowAllEmp.setToolTipText("Show All Employees");
        AEmp_Search_Btn_ShowAllEmp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_Search_Btn_ShowAllEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_Search_Btn_ShowAllEmpActionPerformed(evt);
            }
        });

        AEmp_Search_TextF_EmpID.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_Search_TextF_EmpID.setToolTipText("Employee ID");
        AEmp_Search_TextF_EmpID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AEmp_Search_TextF_EmpIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AEmp_Search_TextF_EmpIDKeyTyped(evt);
            }
        });

        AEmp_Search_TextF_EmpName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_Search_TextF_EmpName.setToolTipText("Employee First Name");
        AEmp_Search_TextF_EmpName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        AEmp_Search_TextF_EmpName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AEmp_Search_TextF_EmpNameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AEmp_Search_TextF_EmpNameKeyTyped(evt);
            }
        });

        AEmp_Search_CheckBox_LeavedEmp.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_Search_CheckBox_LeavedEmp.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_Search_CheckBox_LeavedEmp.setText("Leaved Employees");
        AEmp_Search_CheckBox_LeavedEmp.setToolTipText("Is the employee leaving the job ?");
        AEmp_Search_CheckBox_LeavedEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AEmp_Search_CheckBox_LeavedEmpMouseClicked(evt);
            }
        });

        AEmp_LPane_SearchEmp.setLayer(Emp_Scp_1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_SearchEmp.setLayer(AEmp_Search_Label_EmpID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_SearchEmp.setLayer(AEmp_Search_Label_EmpName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_SearchEmp.setLayer(AEmp_Search_Btn_ShowAllEmp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_SearchEmp.setLayer(AEmp_Search_TextF_EmpID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_SearchEmp.setLayer(AEmp_Search_TextF_EmpName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_SearchEmp.setLayer(AEmp_Search_CheckBox_LeavedEmp, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout AEmp_LPane_SearchEmpLayout = new javax.swing.GroupLayout(AEmp_LPane_SearchEmp);
        AEmp_LPane_SearchEmp.setLayout(AEmp_LPane_SearchEmpLayout);
        AEmp_LPane_SearchEmpLayout.setHorizontalGroup(
            AEmp_LPane_SearchEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AEmp_LPane_SearchEmpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AEmp_LPane_SearchEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AEmp_LPane_SearchEmpLayout.createSequentialGroup()
                        .addComponent(Emp_Scp_1)
                        .addGap(10, 10, 10))
                    .addGroup(AEmp_LPane_SearchEmpLayout.createSequentialGroup()
                        .addComponent(AEmp_Search_Label_EmpID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEmp_Search_TextF_EmpID, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AEmp_Search_Label_EmpName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEmp_Search_TextF_EmpName, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(AEmp_Search_Btn_ShowAllEmp)
                        .addGap(18, 18, 18)
                        .addComponent(AEmp_Search_CheckBox_LeavedEmp)
                        .addGap(275, 275, 275))))
        );
        AEmp_LPane_SearchEmpLayout.setVerticalGroup(
            AEmp_LPane_SearchEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AEmp_LPane_SearchEmpLayout.createSequentialGroup()
                .addGroup(AEmp_LPane_SearchEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_Search_Label_EmpID)
                    .addComponent(AEmp_Search_TextF_EmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_Search_Label_EmpName)
                    .addComponent(AEmp_Search_TextF_EmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_Search_Btn_ShowAllEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_Search_CheckBox_LeavedEmp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Emp_Scp_1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AEmp_Btn_Ok.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_Btn_Ok.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmp_Btn_Ok.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Btn_Ok.setText("Ok");
        AEmp_Btn_Ok.setToolTipText("Ok");
        AEmp_Btn_Ok.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_Btn_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_Btn_OkActionPerformed(evt);
            }
        });

        AEmp_Btn_Back.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_Btn_Back.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmp_Btn_Back.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Btn_Back.setText("Back");
        AEmp_Btn_Back.setToolTipText("Back");
        AEmp_Btn_Back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_Btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_Btn_BackActionPerformed(evt);
            }
        });

        AEmp_LPane_AdEdReEmp.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Add / Edit / Remove Employee", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 11), new java.awt.Color(104, 2, 5))); // NOI18N
        AEmp_LPane_AdEdReEmp.setPreferredSize(new java.awt.Dimension(1052, 219));
        AEmp_LPane_AdEdReEmp.setVerifyInputWhenFocusTarget(false);

        AEmp_AdEdRe_TextF_ContNo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_ContNo.setToolTipText("Employee Contact Number");
        AEmp_AdEdRe_TextF_ContNo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        AEmp_AdEdRe_TextF_ContNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AEmp_AdEdRe_TextF_ContNoKeyTyped(evt);
            }
        });

        AEmp_AdEdRe_Label_ContNo.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_ContNo.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_ContNo.setText("Contact No : ");

        AEmp_AdEdRe_RBtn_GendFemale.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEd_BtnGroup_Gender.add(AEmp_AdEdRe_RBtn_GendFemale);
        AEmp_AdEdRe_RBtn_GendFemale.setText("Female");
        AEmp_AdEdRe_RBtn_GendFemale.setToolTipText("Gender Female");

        AEmp_AdEdRe_RBtn_GendMale.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEd_BtnGroup_Gender.add(AEmp_AdEdRe_RBtn_GendMale);
        AEmp_AdEdRe_RBtn_GendMale.setText("Male");
        AEmp_AdEdRe_RBtn_GendMale.setToolTipText("Gender Male");

        AEmp_AdEdRe_Label_Gender.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_Gender.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_Gender.setText("Gender : ");

        AEmp_AdEdRe_Label_AccesLevel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_AccesLevel.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_AccesLevel.setText("Access Level : ");

        AEmp_AdEdRe_CmbBox_AccesLevel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_CmbBox_AccesLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "User", "Admin", " " }));
        AEmp_AdEdRe_CmbBox_AccesLevel.setToolTipText("Employee Access Level");
        AEmp_AdEdRe_CmbBox_AccesLevel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        AEmp_AdEdRe_Label_Position.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_Position.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_Position.setText("Position : ");

        AEmp_AdEdRe_CmbBox_Position.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_CmbBox_Position.setToolTipText("Employee Position");
        AEmp_AdEdRe_CmbBox_Position.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_CmbBox_Position.setPreferredSize(new java.awt.Dimension(60, 22));

        AEmp_AdEdRe_TextF_EmpID.setEditable(false);
        AEmp_AdEdRe_TextF_EmpID.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_EmpID.setToolTipText("Employee ID");

        AEmp_AdEdRe_TextF_FName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_FName.setToolTipText("Employee First Name");
        AEmp_AdEdRe_TextF_FName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        AEmp_AdEdRe_TextF_FName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AEmp_AdEdRe_TextF_FNameKeyTyped(evt);
            }
        });

        AEmp_AdEdRe_TextF_Address_1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_Address_1.setToolTipText("Employee Address 1");
        AEmp_AdEdRe_TextF_Address_1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        AEmp_AdEdRe_TextF_Address_2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_Address_2.setToolTipText("Employee Address 2");
        AEmp_AdEdRe_TextF_Address_2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        AEmp_AdEdRe_Label_Address_2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_Address_2.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_Address_2.setText("Address 2 : ");

        AEmp_AdEdRe_Label_EmpID.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_EmpID.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_EmpID.setText("Employee ID : ");

        AEmp_AdEdRe_Label_EmpFName.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_EmpFName.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_EmpFName.setText("First Name : ");

        AEmp_AdEdRe_Label_Address_1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_Address_1.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_Address_1.setText("Address 1 : ");

        AEmp_AdEdRe_DateChooser_DOB.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        AEmp_AdEdRe_TextF_LName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_LName.setToolTipText("Employee Last Name");
        AEmp_AdEdRe_TextF_LName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        AEmp_AdEdRe_TextF_LName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AEmp_AdEdRe_TextF_LNameKeyTyped(evt);
            }
        });

        AEmp_AdEdRe_TextF_NICno.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_NICno.setToolTipText("Employee NIC NO");
        AEmp_AdEdRe_TextF_NICno.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        AEmp_AdEdRe_TextF_NICno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_AdEdRe_TextF_NICnoActionPerformed(evt);
            }
        });
        AEmp_AdEdRe_TextF_NICno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AEmp_AdEdRe_TextF_NICnoKeyTyped(evt);
            }
        });

        AEmp_AdEdRe_Label_EmpLName.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_EmpLName.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_EmpLName.setText("Last Name : ");

        AEmp_AdEdRe_Label_EmpLNICno.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_EmpLNICno.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_EmpLNICno.setText("NIC No : ");

        AEmp_AdEdRe_Label_DOB.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_DOB.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_DOB.setText("Date Of Birth : ");

        AEmp_AdEdRe_Label_Email.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Label_Email.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Label_Email.setText("E - mail : ");

        AEmp_AdEdRe_TextF_Email.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_TextF_Email.setToolTipText("Employee E-mail Address");
        AEmp_AdEdRe_TextF_Email.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        AEmp_AdEdRe_Btn_AddEmp.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEdRe_Btn_AddEmp.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Btn_AddEmp.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Btn_AddEmp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/Add_plus.png"))); // NOI18N
        AEmp_AdEdRe_Btn_AddEmp.setText("Add");
        AEmp_AdEdRe_Btn_AddEmp.setToolTipText("Add Employee");
        AEmp_AdEdRe_Btn_AddEmp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_Btn_AddEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_AdEdRe_Btn_AddEmpActionPerformed(evt);
            }
        });

        AEmp_AdEdRe_Btn_EditEmp.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEdRe_Btn_EditEmp.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Btn_EditEmp.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Btn_EditEmp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/Edit_pencil.png"))); // NOI18N
        AEmp_AdEdRe_Btn_EditEmp.setText("Edit");
        AEmp_AdEdRe_Btn_EditEmp.setToolTipText("Edit Employee");
        AEmp_AdEdRe_Btn_EditEmp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
        AEmp_AdEdRe_Btn_EditEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_AdEdRe_Btn_EditEmpActionPerformed(evt);
            }
        });

        AEmp_AdEdRe_Btn_RemoveEmp.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEdRe_Btn_RemoveEmp.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Btn_RemoveEmp.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Btn_RemoveEmp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/trash_bin.png"))); // NOI18N
        AEmp_AdEdRe_Btn_RemoveEmp.setText("Remove");
        AEmp_AdEdRe_Btn_RemoveEmp.setToolTipText("Remove Employee");
        AEmp_AdEdRe_Btn_RemoveEmp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
        AEmp_AdEdRe_Btn_RemoveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_AdEdRe_Btn_RemoveEmpActionPerformed(evt);
            }
        });

        AEmp_AdEdRe_Table_Emp.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmp_AdEdRe_Table_Emp.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Table_Emp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "NIC No", "Gender", "Address 1", "Address 2", "Date of Birth", "Contact No", "E-mail", "Position", "Access Level", "Joined Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AEmp_AdEdRe_Table_Emp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_Table_Emp.setGridColor(new java.awt.Color(102, 102, 102));
        AEmp_AdEdRe_Table_Emp.setIntercellSpacing(new java.awt.Dimension(1, 0));
        AEmp_AdEdRe_Table_Emp.setRowHeight(17);
        AEmp_AdEdRe_Table_Emp.setSelectionBackground(new java.awt.Color(46, 141, 216));
        Emp_Scp_2.setViewportView(AEmp_AdEdRe_Table_Emp);

        AEmp_AdEdRe_Btn_RemoveAdded.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEdRe_Btn_RemoveAdded.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Btn_RemoveAdded.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Btn_RemoveAdded.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/trash_bin.png"))); // NOI18N
        AEmp_AdEdRe_Btn_RemoveAdded.setText("Remove");
        AEmp_AdEdRe_Btn_RemoveAdded.setToolTipText("Remove Added");
        AEmp_AdEdRe_Btn_RemoveAdded.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_Btn_RemoveAdded.setEnabled(false);
        AEmp_AdEdRe_Btn_RemoveAdded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_AdEdRe_Btn_RemoveAddedActionPerformed(evt);
            }
        });

        AEmp_AdEdRe_Btn_AddAll.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_AdEdRe_Btn_AddAll.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmp_AdEdRe_Btn_AddAll.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_AdEdRe_Btn_AddAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/check.png"))); // NOI18N
        AEmp_AdEdRe_Btn_AddAll.setText("Add All");
        AEmp_AdEdRe_Btn_AddAll.setToolTipText("Add All");
        AEmp_AdEdRe_Btn_AddAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_AdEdRe_Btn_AddAll.setEnabled(false);
        AEmp_AdEdRe_Btn_AddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_AdEdRe_Btn_AddAllActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_ContNo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_ContNo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_RBtn_GendFemale, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_RBtn_GendMale, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_Gender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_AccesLevel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_CmbBox_AccesLevel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_Position, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_CmbBox_Position, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_EmpID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_FName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_Address_1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_Address_2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_Address_2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_EmpID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_EmpFName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_Address_1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_DateChooser_DOB, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_LName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_NICno, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_EmpLName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_EmpLNICno, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_DOB, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Label_Email, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_TextF_Email, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Btn_AddEmp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Btn_EditEmp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Btn_RemoveEmp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(Emp_Scp_2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Btn_RemoveAdded, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(AEmp_AdEdRe_Btn_AddAll, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmp_LPane_AdEdReEmp.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout AEmp_LPane_AdEdReEmpLayout = new javax.swing.GroupLayout(AEmp_LPane_AdEdReEmp);
        AEmp_LPane_AdEdReEmp.setLayout(AEmp_LPane_AdEdReEmpLayout);
        AEmp_LPane_AdEdReEmpLayout.setHorizontalGroup(
            AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(AEmp_AdEdRe_Label_Gender)
                        .addGap(18, 18, 18)
                        .addComponent(AEmp_AdEdRe_RBtn_GendMale)
                        .addGap(18, 18, 18)
                        .addComponent(AEmp_AdEdRe_RBtn_GendFemale))
                    .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                        .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AEmp_AdEdRe_Label_AccesLevel)
                            .addComponent(AEmp_AdEdRe_Label_Position))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AEmp_AdEdRe_CmbBox_Position, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AEmp_AdEdRe_CmbBox_AccesLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AEmp_AdEdRe_Label_EmpFName)
                                    .addComponent(AEmp_AdEdRe_Label_EmpID)
                                    .addComponent(AEmp_AdEdRe_Label_EmpLName)
                                    .addComponent(AEmp_AdEdRe_Label_EmpLNICno))
                                .addGap(4, 4, 4)
                                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AEmp_AdEdRe_TextF_NICno)
                                    .addComponent(AEmp_AdEdRe_TextF_LName)
                                    .addComponent(AEmp_AdEdRe_TextF_FName)
                                    .addComponent(AEmp_AdEdRe_TextF_EmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(AEmp_AdEdRe_Label_Address_1)
                                        .addComponent(AEmp_AdEdRe_Label_Address_2)
                                        .addComponent(AEmp_AdEdRe_Label_DOB))
                                    .addComponent(AEmp_AdEdRe_Label_ContNo, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AEmp_AdEdRe_Label_Email, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AEmp_AdEdRe_TextF_ContNo, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AEmp_AdEdRe_DateChooser_DOB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(AEmp_AdEdRe_TextF_Address_2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AEmp_AdEdRe_TextF_Address_1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AEmp_AdEdRe_TextF_Email, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                        .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(AEmp_AdEdRe_Btn_RemoveAdded)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AEmp_AdEdRe_Btn_AddAll))
                            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                                .addComponent(AEmp_AdEdRe_Btn_AddEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AEmp_AdEdRe_Btn_EditEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AEmp_AdEdRe_Btn_RemoveEmp)
                                .addGap(74, 74, 74)
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(7, 7, 7))
                    .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                        .addComponent(Emp_Scp_2, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        AEmp_LPane_AdEdReEmpLayout.setVerticalGroup(
            AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_TextF_EmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_AdEdRe_Label_EmpID))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Label_EmpFName)
                    .addComponent(AEmp_AdEdRe_TextF_FName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Label_EmpLName)
                    .addComponent(AEmp_AdEdRe_TextF_LName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_TextF_NICno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_AdEdRe_Label_EmpLNICno))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Label_Address_1)
                    .addComponent(AEmp_AdEdRe_TextF_Address_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Label_Address_2)
                    .addComponent(AEmp_AdEdRe_TextF_Address_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AEmp_AdEdRe_Label_DOB)
                    .addComponent(AEmp_AdEdRe_DateChooser_DOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_TextF_ContNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_AdEdRe_Label_ContNo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Label_Email)
                    .addComponent(AEmp_AdEdRe_TextF_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_RBtn_GendMale)
                    .addComponent(AEmp_AdEdRe_RBtn_GendFemale)
                    .addComponent(AEmp_AdEdRe_Label_Gender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_CmbBox_Position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_AdEdRe_Label_Position))
                .addGap(4, 4, 4)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_CmbBox_AccesLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AEmp_AdEdRe_Label_AccesLevel))
                .addGap(0, 6, Short.MAX_VALUE))
            .addGroup(AEmp_LPane_AdEdReEmpLayout.createSequentialGroup()
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Btn_AddEmp)
                    .addComponent(AEmp_AdEdRe_Btn_EditEmp)
                    .addComponent(AEmp_AdEdRe_Btn_RemoveEmp)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Emp_Scp_2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AEmp_LPane_AdEdReEmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_AdEdRe_Btn_RemoveAdded)
                    .addComponent(AEmp_AdEdRe_Btn_AddAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(484, 484, 484)
                        .addComponent(AEmp_Label_Heading))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(946, 946, 946)
                        .addComponent(AEmp_Btn_Back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEmp_Btn_Ok)))
                .addGap(0, 12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AEmp_LPane_SearchEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE)
                    .addComponent(AEmp_LPane_AdEdReEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(AEmp_Label_Heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AEmp_LPane_SearchEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AEmp_LPane_AdEdReEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmp_Btn_Back)
                    .addComponent(AEmp_Btn_Ok))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AEmp_Search_Btn_ShowAllEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_Search_Btn_ShowAllEmpActionPerformed
        Clear();
        AEmp_Search_TextF_EmpName.setText("");
        AEmp_Search_TextF_EmpID.setText("");
        try {
            DefaultTableModel List_SearchT = (DefaultTableModel) AEmp_Search_Table_Emp.getModel();
            List_SearchT.setRowCount(0);
            ResultSet resEmp = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee");
            while (resEmp.next()) {
                if (resEmp.getString("Emp_Staus").equals("1") && !AEmp_Search_CheckBox_LeavedEmp.isSelected()) {//not leaved emp
                    Vector v = new Vector();
                    v.addElement(resEmp.getString("Emp_ID"));
                    v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                    v.addElement(resEmp.getString("Emp_NIC_No"));
                    v.addElement(resEmp.getString("Emp_Gender"));
                    v.addElement(resEmp.getString("Emp_Address_1"));
                    v.addElement(resEmp.getString("Emp_Address_2"));
                    v.addElement(resEmp.getString("Emp_DOB"));
                    v.addElement(resEmp.getString("Emp_Con_No"));
                    v.addElement(resEmp.getString("Emp_Email"));
                    v.addElement(resEmp.getString("Emp_AccL"));
                    ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                    while (resEmpPosDetail.next()) {
                        if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                            v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                        } else {
                            v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                        }
                    }
                    v.addElement(resEmp.getString("Emp_Join_Date"));
                    v.addElement(resEmp.getString("Emp_Leaved_Date"));
                    List_SearchT.addRow(v);
                } else if (resEmp.getString("Emp_Staus").equals("0") && AEmp_Search_CheckBox_LeavedEmp.isSelected()) {// elaved emp
                    Vector v = new Vector();
                    v.addElement(resEmp.getString("Emp_ID"));
                    v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                    v.addElement(resEmp.getString("Emp_NIC_No"));
                    v.addElement(resEmp.getString("Emp_Gender"));
                    v.addElement(resEmp.getString("Emp_Address_1"));
                    v.addElement(resEmp.getString("Emp_Address_2"));
                    v.addElement(resEmp.getString("Emp_DOB"));
                    v.addElement(resEmp.getString("Emp_Con_No"));
                    v.addElement(resEmp.getString("Emp_Email"));
                    v.addElement(resEmp.getString("Emp_AccL"));
                    ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                    while (resEmpPosDetail.next()) {
                        if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                            v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                        } else {
                            v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                        }
                    }
                    v.addElement(resEmp.getString("Emp_Join_Date"));
                    v.addElement(resEmp.getString("Emp_Leaved_Date"));
                    List_SearchT.addRow(v);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        a = 0;
        AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
        AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
    }//GEN-LAST:event_AEmp_Search_Btn_ShowAllEmpActionPerformed

    private void AEmp_Btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_Btn_BackActionPerformed
        // TODSup_Label_Headingcode here:
    }//GEN-LAST:event_AEmp_Btn_BackActionPerformed

    private void AEmp_Btn_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_Btn_OkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AEmp_Btn_OkActionPerformed

    private void AEmp_Search_TextF_EmpIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_Search_TextF_EmpIDKeyReleased
        AEmp_Search_TextF_EmpName.setText("");
        DefaultTableModel List_SearchT = (DefaultTableModel) AEmp_Search_Table_Emp.getModel();
        try {
            if (!(AEmp_Search_TextF_EmpID.getText().equals("")) || AEmp_Search_TextF_EmpID.getText() == null) {
                List_SearchT.setRowCount(0);
                ResultSet resEmp = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee WHERE Emp_ID LIKE'" + AEmp_Search_TextF_EmpID.getText() + "%'");
                while (resEmp.next()) {
                    if (resEmp.getString("Emp_Staus").equals("1") && !AEmp_Search_CheckBox_LeavedEmp.isSelected()) {//not leaved emp
                        Vector v = new Vector();
                        v.addElement(resEmp.getString("Emp_ID"));
                        v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                        v.addElement(resEmp.getString("Emp_NIC_No"));
                        v.addElement(resEmp.getString("Emp_Gender"));
                        v.addElement(resEmp.getString("Emp_Address_1"));
                        v.addElement(resEmp.getString("Emp_Address_2"));
                        v.addElement(resEmp.getString("Emp_DOB"));
                        v.addElement(resEmp.getString("Emp_Con_No"));
                        v.addElement(resEmp.getString("Emp_Email"));
                        v.addElement(resEmp.getString("Emp_AccL"));
                        ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                        while (resEmpPosDetail.next()) {
                            if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                            } else {
                                v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                            }
                        }
                        v.addElement(resEmp.getString("Emp_Join_Date"));
                        v.addElement(resEmp.getString("Emp_Leaved_Date"));
                        List_SearchT.addRow(v);
                    } else if (resEmp.getString("Emp_Staus").equals("0") && AEmp_Search_CheckBox_LeavedEmp.isSelected()) {// elaved emp
                        Vector v = new Vector();
                        v.addElement(resEmp.getString("Emp_ID"));
                        v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                        v.addElement(resEmp.getString("Emp_NIC_No"));
                        v.addElement(resEmp.getString("Emp_Gender"));
                        v.addElement(resEmp.getString("Emp_Address_1"));
                        v.addElement(resEmp.getString("Emp_Address_2"));
                        v.addElement(resEmp.getString("Emp_DOB"));
                        v.addElement(resEmp.getString("Emp_Con_No"));
                        v.addElement(resEmp.getString("Emp_Email"));
                        v.addElement(resEmp.getString("Emp_AccL"));
                        ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                        while (resEmpPosDetail.next()) {
                            if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                            } else {
                                v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                            }
                        }
                        v.addElement(resEmp.getString("Emp_Join_Date"));
                        v.addElement(resEmp.getString("Emp_Leaved_Date"));
                        List_SearchT.addRow(v);
                    }
                }
            }
            Clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        a = 0;
        AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
        AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
    }//GEN-LAST:event_AEmp_Search_TextF_EmpIDKeyReleased

    private void AEmp_Search_TextF_EmpNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_Search_TextF_EmpNameKeyReleased
        AEmp_Search_TextF_EmpID.setText("");
        DefaultTableModel List_SearchT = (DefaultTableModel) AEmp_Search_Table_Emp.getModel();
        try {
            if (!(AEmp_Search_TextF_EmpName.getText().equals("")) || AEmp_Search_TextF_EmpName.getText() == null) {
                List_SearchT.setRowCount(0);
                ResultSet resEmp = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee WHERE Emp_FName LIKE'" + AEmp_Search_TextF_EmpName.getText() + "%'OR Emp_LName LIKE'" + AEmp_Search_TextF_EmpName.getText() + "%'");
                while (resEmp.next()) {
                    if (resEmp.getString("Emp_Staus").equals("1") && !AEmp_Search_CheckBox_LeavedEmp.isSelected()) {//not leaved emp
                        Vector v = new Vector();
                        v.addElement(resEmp.getString("Emp_ID"));
                        v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                        v.addElement(resEmp.getString("Emp_NIC_No"));
                        v.addElement(resEmp.getString("Emp_Gender"));
                        v.addElement(resEmp.getString("Emp_Address_1"));
                        v.addElement(resEmp.getString("Emp_Address_2"));
                        v.addElement(resEmp.getString("Emp_DOB"));
                        v.addElement(resEmp.getString("Emp_Con_No"));
                        v.addElement(resEmp.getString("Emp_Email"));
                        v.addElement(resEmp.getString("Emp_AccL"));
                        ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                        while (resEmpPosDetail.next()) {
                            if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                            } else {
                                v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                            }
                        }
                        v.addElement(resEmp.getString("Emp_Join_Date"));
                        v.addElement(resEmp.getString("Emp_Leaved_Date"));
                        List_SearchT.addRow(v);
                    } else if (resEmp.getString("Emp_Staus").equals("0") && AEmp_Search_CheckBox_LeavedEmp.isSelected()) {// elaved emp
                        Vector v = new Vector();
                        v.addElement(resEmp.getString("Emp_ID"));
                        v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                        v.addElement(resEmp.getString("Emp_NIC_No"));
                        v.addElement(resEmp.getString("Emp_Gender"));
                        v.addElement(resEmp.getString("Emp_Address_1"));
                        v.addElement(resEmp.getString("Emp_Address_2"));
                        v.addElement(resEmp.getString("Emp_DOB"));
                        v.addElement(resEmp.getString("Emp_Con_No"));
                        v.addElement(resEmp.getString("Emp_Email"));
                        v.addElement(resEmp.getString("Emp_AccL"));
                        ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                        while (resEmpPosDetail.next()) {
                            if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                            } else {
                                v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                            }
                        }
                        v.addElement(resEmp.getString("Emp_Join_Date"));
                        v.addElement(resEmp.getString("Emp_Leaved_Date"));
                        List_SearchT.addRow(v);
                    }
                }
            }
            Clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        a = 0;
        AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
        AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
    }//GEN-LAST:event_AEmp_Search_TextF_EmpNameKeyReleased

    private void AEmp_Search_Table_EmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AEmp_Search_Table_EmpMouseClicked
        AEmp_Search_Table_Emp.setRowSelectionAllowed(true);
        try {
            if (!AEmp_Search_CheckBox_LeavedEmp.isSelected()) {
                ResultSet List_ToAdEdRe = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee WHERE Emp_ID='" + (String) AEmp_Search_Table_Emp.getValueAt(AEmp_Search_Table_Emp.getSelectedRow(), 0) + "'");
                while (List_ToAdEdRe.next()) {
                    AEmp_AdEdRe_TextF_EmpID.setText(List_ToAdEdRe.getString("Emp_ID"));
                    AEmp_AdEdRe_TextF_FName.setText(List_ToAdEdRe.getString("Emp_FName"));
                    AEmp_AdEdRe_TextF_LName.setText(List_ToAdEdRe.getString("Emp_LName"));
                    AEmp_AdEdRe_TextF_NICno.setText(List_ToAdEdRe.getString("Emp_NIC_No"));
                    AEmp_AdEdRe_TextF_Address_1.setText(List_ToAdEdRe.getString("Emp_Address_1"));
                    AEmp_AdEdRe_TextF_Address_2.setText(List_ToAdEdRe.getString("Emp_Address_2"));
                    String dateS = List_ToAdEdRe.getString("Emp_DOB");
                    SimpleDateFormat formatterDate = new SimpleDateFormat("dd MMM yyyy");
                    Date date = formatterDate.parse(dateS);
                    AEmp_AdEdRe_DateChooser_DOB.setDate(date);
                    AEmp_AdEdRe_TextF_ContNo.setText(List_ToAdEdRe.getString("Emp_Con_No"));
                    AEmp_AdEdRe_TextF_Email.setText(List_ToAdEdRe.getString("Emp_Email"));
                    switch (List_ToAdEdRe.getString("Emp_Gender")) {
                        case "Male":
                            AEmp_AdEdRe_RBtn_GendMale.setSelected(true);
                            AEmp_AdEdRe_RBtn_GendFemale.setSelected(false);
                            break;
                        case "Female":
                            AEmp_AdEdRe_RBtn_GendFemale.setSelected(true);
                            AEmp_AdEdRe_RBtn_GendMale.setSelected(false);
                            break;
                    }
                    ResultSet res_posd = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + List_ToAdEdRe.getString("Emp_Pos_De_ID") + "'");
                    while (res_posd.next()) {
                        AEmp_AdEdRe_CmbBox_Position.setSelectedItem(res_posd.getString("Emp_Pos_De_Name"));
                    }
                    AEmp_AdEdRe_CmbBox_AccesLevel.setSelectedItem(List_ToAdEdRe.getString("Emp_AccL"));
                }
                AEmp_AdEdRe_Btn_EditEmp.setEnabled(true);
                AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(true);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        clear = 0;
        a = 0;
    }//GEN-LAST:event_AEmp_Search_Table_EmpMouseClicked

    private void AEmp_Search_CheckBox_LeavedEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AEmp_Search_CheckBox_LeavedEmpMouseClicked
        Clear();
        Refresh();
    }//GEN-LAST:event_AEmp_Search_CheckBox_LeavedEmpMouseClicked

    private void AEmp_Search_TextF_EmpIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_Search_TextF_EmpIDKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AEmp_Search_TextF_EmpIDKeyTyped

    private void AEmp_AdEdRe_TextF_NICnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_TextF_NICnoKeyTyped
        if (AEmp_AdEdRe_TextF_NICno.getText().length() >= 10) {
            evt.consume();
        } else if (!(AEmp_AdEdRe_TextF_NICno.getText().length() >= 10)) {
            if (((AEmp_AdEdRe_TextF_NICno.getText().length() >= 0) && (AEmp_AdEdRe_TextF_NICno.getText().length() <= 8)) && (!Character.isDigit(evt.getKeyChar()))) {
                evt.consume();
            } else if ((AEmp_AdEdRe_TextF_NICno.getText().length() > 8) && (Character.isDigit(evt.getKeyChar()))) {
                evt.consume();
            } else if ((AEmp_AdEdRe_TextF_NICno.getText().length() == 9) && (!((evt.getKeyChar() == 'v') || (evt.getKeyChar() == 'V')))) {
                evt.consume();
                
            }
        }
    }//GEN-LAST:event_AEmp_AdEdRe_TextF_NICnoKeyTyped
    private int a = 0;
    private int b = 0;
    private int clear = 0;
    private int ID = 1;
    private void AEmp_AdEdRe_Btn_AddEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_Btn_AddEmpActionPerformed
        AEmp_Search_Table_Emp.setRowSelectionAllowed(false);
        try {
            DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmp_AdEdRe_Table_Emp.getModel();
            ResultSet res_1 = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_ID FROM employee");
            if (!res_1.next()) {// if no records in table
                if (b == 0) {// first record
                    AEmp_AdEdRe_TextF_EmpID.setText("" + ID);
                    b = 1;
                } else if (b == 1) {//next records
                    if (AEmp_AdEdRe_TextF_FName.getText().equals("") || AEmp_AdEdRe_TextF_FName.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the First Name", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_LName.getText().equals("") || AEmp_AdEdRe_TextF_LName.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the Last Name", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_NICno.getText().equals("") || AEmp_AdEdRe_TextF_NICno.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the NIC No", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_Address_1.getText().equals("") || AEmp_AdEdRe_TextF_Address_1.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the Address", "Error", 0);
                    } else if (AEmp_AdEdRe_DateChooser_DOB.getDate() == null) {
                        JOptionPane.showMessageDialog(this, "Plese select the date of birth", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_ContNo.getText().equals("") || AEmp_AdEdRe_TextF_ContNo.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the contact no", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_Email.getText().equals("") || AEmp_AdEdRe_TextF_Email.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the Email address", "Error", 0);
                    } else if (!(AEmp_AdEdRe_RBtn_GendMale.isSelected() || AEmp_AdEdRe_RBtn_GendFemale.isSelected())) {
                        JOptionPane.showMessageDialog(this, "Plese select the gender", "Error", 0);
                    } else if (AEmp_AdEdRe_CmbBox_Position.getSelectedItem().equals("") || AEmp_AdEdRe_CmbBox_Position.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(this, "Plese select the Position", "Error", 0);
                    } else if (AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem().equals("") || AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(this, "Plese select the Access level", "Error", 0);
                    } else {
                        Vector v = new Vector();// Add to AdEdRe Table
                        v.addElement(AEmp_AdEdRe_TextF_EmpID.getText());
                        v.addElement(AEmp_AdEdRe_TextF_FName.getText());
                        v.addElement(AEmp_AdEdRe_TextF_LName.getText());
                        v.addElement(AEmp_AdEdRe_TextF_NICno.getText());
                        if (AEmp_AdEdRe_RBtn_GendFemale.isSelected()) {
                            v.addElement("Female");
                        } else if (AEmp_AdEdRe_RBtn_GendMale.isSelected()) {
                            v.addElement("Male");
                        } else {
                            v.addElement(" ");
                        }
                        v.addElement(AEmp_AdEdRe_TextF_Address_1.getText());
                        v.addElement(AEmp_AdEdRe_TextF_Address_2.getText());
                        if (!(AEmp_AdEdRe_DateChooser_DOB.getDate() == null)) {
                            SimpleDateFormat dateFormatter = new SimpleDateFormat("dd MMMM yyyy");
                            v.addElement(dateFormatter.format(AEmp_AdEdRe_DateChooser_DOB.getDate()));
                        } else {
                            v.addElement(" ");
                        }
                        v.addElement(AEmp_AdEdRe_TextF_ContNo.getText());
                        v.addElement(AEmp_AdEdRe_TextF_Email.getText());
                        v.addElement(AEmp_AdEdRe_CmbBox_Position.getSelectedItem());
                        v.addElement(AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem());
                        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM yyyy");
                        v.addElement(dateFormat.format(Calendar.getInstance().getTime()));
                        AdEdReTblModel.addRow(v);
                        ID++;// ID increment
                        Clear();
                        AEmp_AdEdRe_TextF_EmpID.setText("" + ID);
                    }
                }
            } else {//if table filled with data
                if (a == 0) {// check text fields not empty // for the first set of data to table
                    if (clear == 0) { //// clear text fields data from search table
                        Clear();
                        clear = 1;
                    }
                    if (AdEdReTblModel.getRowCount() == 0) {
                        res_1.last();// get last ID no
                        ID = Integer.parseInt(res_1.getString("Emp_ID"));
                        ID++;// ID increment
                        AEmp_AdEdRe_TextF_EmpID.setText("" + ID);
                    } else {
                        ID = Integer.parseInt((String) AdEdReTblModel.getValueAt(AdEdReTblModel.getRowCount() - 1, 0));// get ID last ID no in AdEdRe Table
                        ID++;//ID increment
                        AEmp_AdEdRe_TextF_EmpID.setText("" + ID);
                    }
                    a = 1;
                } else if (a == 1) {// if first data set added to db
                    if (AEmp_AdEdRe_TextF_FName.getText().equals("") || AEmp_AdEdRe_TextF_FName.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the First Name", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_LName.getText().equals("") || AEmp_AdEdRe_TextF_LName.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the Last Name", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_NICno.getText().equals("") || AEmp_AdEdRe_TextF_NICno.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the NIC No", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_Address_1.getText().equals("") || AEmp_AdEdRe_TextF_Address_1.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the Address", "Error", 0);
                    } else if (AEmp_AdEdRe_DateChooser_DOB.getDate() == null) {
                        JOptionPane.showMessageDialog(this, "Plese select the date of birth", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_ContNo.getText().equals("") || AEmp_AdEdRe_TextF_ContNo.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the contact no", "Error", 0);
                    } else if (AEmp_AdEdRe_TextF_Email.getText().equals("") || AEmp_AdEdRe_TextF_Email.getText() == null) {
                        JOptionPane.showMessageDialog(this, "Plese fill the Email address", "Error", 0);
                    } else if (!(AEmp_AdEdRe_RBtn_GendMale.isSelected() || AEmp_AdEdRe_RBtn_GendFemale.isSelected())) {
                        JOptionPane.showMessageDialog(this, "Plese select the gender", "Error", 0);
                    } else if (AEmp_AdEdRe_CmbBox_Position.getSelectedItem().equals("") || AEmp_AdEdRe_CmbBox_Position.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(this, "Plese select the Position", "Error", 0);
                    } else if (AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem().equals("") || AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(this, "Plese select the Access level", "Error", 0);
                    } else {
                        Vector v = new Vector();// Add to AdEdRe Table
                        v.addElement(AEmp_AdEdRe_TextF_EmpID.getText());
                        v.addElement(AEmp_AdEdRe_TextF_FName.getText());
                        v.addElement(AEmp_AdEdRe_TextF_LName.getText());
                        v.addElement(AEmp_AdEdRe_TextF_NICno.getText());
                        if (AEmp_AdEdRe_RBtn_GendFemale.isSelected()) {
                            v.addElement("Female");
                        } else if (AEmp_AdEdRe_RBtn_GendMale.isSelected()) {
                            v.addElement("Male");
                        } else {
                            v.addElement(" ");
                        }
                        v.addElement(AEmp_AdEdRe_TextF_Address_1.getText());
                        v.addElement(AEmp_AdEdRe_TextF_Address_2.getText());
                        if (!(AEmp_AdEdRe_DateChooser_DOB.getDate() == null)) {
                            SimpleDateFormat dateFormatter = new SimpleDateFormat("dd MMMM yyyy");
                            v.addElement(dateFormatter.format(AEmp_AdEdRe_DateChooser_DOB.getDate()));
                        } else {
                            v.addElement(" ");
                        }
                        v.addElement(AEmp_AdEdRe_TextF_ContNo.getText());
                        v.addElement(AEmp_AdEdRe_TextF_Email.getText());
                        v.addElement(AEmp_AdEdRe_CmbBox_Position.getSelectedItem());
                        v.addElement(AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem());
                        SimpleDateFormat dateFormat = new SimpleDateFormat("d MMMM yyyy");
                        v.addElement(dateFormat.format(Calendar.getInstance().getTime()));
                        AdEdReTblModel.addRow(v);
                        ID++;
                        Clear();
                        AEmp_AdEdRe_TextF_EmpID.setText("" + ID);
                    }
                }
            }
            clear = 2;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            if (AdEdReTblModel.getRowCount() > 0) {
                AEmp_AdEdRe_Btn_RemoveAdded.setEnabled(true);
                AEmp_AdEdRe_Btn_AddAll.setEnabled(true);
            }
            AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
            AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_AEmp_AdEdRe_Btn_AddEmpActionPerformed

    private void AEmp_AdEdRe_Btn_EditEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_Btn_EditEmpActionPerformed
        if (!(AEmp_AdEdRe_TextF_EmpID.getText().equals("")) && AEmp_AdEdRe_TextF_EmpID.getText() != null) {
            if (AEmp_AdEdRe_TextF_FName.getText().equals("") || AEmp_AdEdRe_TextF_FName.getText() == null) {
                JOptionPane.showMessageDialog(this, "Plese fill the First Name", "Error", 0);
            } else if (AEmp_AdEdRe_TextF_LName.getText().equals("") || AEmp_AdEdRe_TextF_LName.getText() == null) {
                JOptionPane.showMessageDialog(this, "Plese fill the Last Name", "Error", 0);
            } else if (AEmp_AdEdRe_TextF_NICno.getText().equals("") || AEmp_AdEdRe_TextF_NICno.getText() == null) {
                JOptionPane.showMessageDialog(this, "Plese fill the NIC No", "Error", 0);
            } else if (AEmp_AdEdRe_TextF_Address_1.getText().equals("") || AEmp_AdEdRe_TextF_Address_1.getText() == null) {
                JOptionPane.showMessageDialog(this, "Plese fill the Address", "Error", 0);
            } else if (AEmp_AdEdRe_DateChooser_DOB.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Plese select the date of birth", "Error", 0);
            } else if (AEmp_AdEdRe_TextF_ContNo.getText().equals("") || AEmp_AdEdRe_TextF_ContNo.getText() == null) {
                JOptionPane.showMessageDialog(this, "Plese fill the contact no", "Error", 0);
            } else if (AEmp_AdEdRe_TextF_Email.getText().equals("") || AEmp_AdEdRe_TextF_Email.getText() == null) {
                JOptionPane.showMessageDialog(this, "Plese fill the Email address", "Error", 0);
            } else if (!(AEmp_AdEdRe_RBtn_GendMale.isSelected() || AEmp_AdEdRe_RBtn_GendFemale.isSelected())) {
                JOptionPane.showMessageDialog(this, "Plese select the gender", "Error", 0);
            } else if (AEmp_AdEdRe_CmbBox_Position.getSelectedItem().equals("") || AEmp_AdEdRe_CmbBox_Position.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Plese select the Position", "Error", 0);
            } else if (AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem().equals("") || AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Plese select the Access level", "Error", 0);
            } else {
                int u = JOptionPane.showConfirmDialog(this, "Do you want to update this Record ?", "Are You Sure ?", 0, 3);
                if (u == 0) {
                    Update();
                    Refresh();
                }
                AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
                AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
                AEmp_Search_Table_Emp.setRowSelectionAllowed(false);
                Clear();
            }
        }
    }//GEN-LAST:event_AEmp_AdEdRe_Btn_EditEmpActionPerformed

    private void AEmp_AdEdRe_Btn_RemoveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_Btn_RemoveEmpActionPerformed
        if (!(AEmp_AdEdRe_TextF_EmpID.getText().equals("")) && AEmp_AdEdRe_TextF_EmpID.getText() != null) {
            int d = JOptionPane.showConfirmDialog(this, "Do you want to delete this record ?", "Are You Sure ?", 0, 3);
            if (d == 0) {
                Delete();
                Refresh();
            }
        }
        AEmp_AdEdRe_Btn_EditEmp.setEnabled(false);
        AEmp_AdEdRe_Btn_RemoveEmp.setEnabled(false);
        AEmp_Search_Table_Emp.setRowSelectionAllowed(false);
        Clear();
    }//GEN-LAST:event_AEmp_AdEdRe_Btn_RemoveEmpActionPerformed

    private void AEmp_AdEdRe_Btn_RemoveAddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_Btn_RemoveAddedActionPerformed
        DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmp_AdEdRe_Table_Emp.getModel();
        int[] indexes = AEmp_AdEdRe_Table_Emp.getSelectedRows();
        int res = 0;
        for (int i = 0; i < indexes.length; i++) {
            res += (i > 0) ? (indexes[i] - indexes[i - 1] - 1) : 0;
            int index = AEmp_AdEdRe_Table_Emp.convertColumnIndexToModel(indexes[0] + res);
            AdEdReTblModel.removeRow(index);
        }
        if (AdEdReTblModel.getRowCount() == 0) {
            AEmp_AdEdRe_Btn_RemoveAdded.setEnabled(false);
            AEmp_AdEdRe_Btn_AddAll.setEnabled(false);
        }
    }//GEN-LAST:event_AEmp_AdEdRe_Btn_RemoveAddedActionPerformed

    private void AEmp_AdEdRe_Btn_AddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_Btn_AddAllActionPerformed
        DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmp_AdEdRe_Table_Emp.getModel();
        try {
            int i = 0;
            String pos = "";
            String accl = "";
            while (i < AdEdReTblModel.getRowCount()) {
                ResultSet resUpEmpPos = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_ID FROM emp_pos_detail WHERE Emp_Pos_De_Name='" + AdEdReTblModel.getValueAt(i, 9) + "'");
                while (resUpEmpPos.next()) {
                    pos = resUpEmpPos.getString("Emp_Pos_De_ID");
                }
                accl = (String) AdEdReTblModel.getValueAt(i, 11);
                ConnectDB.DBConnection().createStatement().executeUpdate("INSERT INTO employee VALUES('" + AdEdReTblModel.getValueAt(i, 0) + "','" + AdEdReTblModel.getValueAt(i, 1) + "','" + AdEdReTblModel.getValueAt(i, 2) + "','" + AdEdReTblModel.getValueAt(i, 3) + "','" + AdEdReTblModel.getValueAt(i, 5) + "','" + AdEdReTblModel.getValueAt(i, 6) + "','" + AdEdReTblModel.getValueAt(i, 7) + "','" + AdEdReTblModel.getValueAt(i, 8) + "','" + AdEdReTblModel.getValueAt(i, 9) + "','" + AdEdReTblModel.getValueAt(i, 4) + "','" + AdEdReTblModel.getValueAt(i, 12) + "','-----','" + pos + "','" + accl + "','" + 1 + "')");
                i++;                                                                                          //id                                      fn                                              ln                                 nicno                                              ad1                                                 ad2                                     dob                                 cont no                                        email                               gend                                join                            leave         pos        access
            }
            ConnectDB.DBConnection().createStatement().executeUpdate("INSERT INTO emppassword VALUES('"+AdEdReTblModel.getValueAt(0, 0)+"','12345','','','','','','','0')");
            JOptionPane.showMessageDialog(this, "Records added succesfully");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        Refresh();
        a = 0;
        ID = 1;
        AdEdReTblModel.setRowCount(0);
        if (AdEdReTblModel.getRowCount() == 0) {
            AEmp_AdEdRe_Btn_AddAll.setEnabled(false);
            AEmp_AdEdRe_Btn_RemoveAdded.setEnabled(false);
        }
    }//GEN-LAST:event_AEmp_AdEdRe_Btn_AddAllActionPerformed

    private void AEmp_AdEdRe_TextF_FNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_TextF_FNameKeyTyped
        if (Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AEmp_AdEdRe_TextF_FNameKeyTyped

    private void AEmp_AdEdRe_TextF_LNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_TextF_LNameKeyTyped
        if (Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AEmp_AdEdRe_TextF_LNameKeyTyped

    private void AEmp_Search_TextF_EmpNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_Search_TextF_EmpNameKeyTyped
        if (Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AEmp_Search_TextF_EmpNameKeyTyped

    private void AEmp_AdEdRe_TextF_ContNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_TextF_ContNoKeyTyped
        if (AEmp_AdEdRe_TextF_ContNo.getText().length() > 9 || !Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
        if (AEmp_AdEdRe_TextF_ContNo.getText().length() > 8) {
            AEmp_AdEdRe_TextF_Email.grabFocus();
        }
    }//GEN-LAST:event_AEmp_AdEdRe_TextF_ContNoKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String gend;
        if(AEmp_AdEdRe_RBtn_GendMale.isSelected()){
            gend = "Male";
        }else{
            gend = "Female";
        }
        
        
        try {
            Connection c = ConnectDB.DBConnection();
            Statement stmt = c.createStatement();
            stmt.executeUpdate("INSERT INTO employee VALUES ('"+AEmp_AdEdRe_TextF_EmpID.getText()+"','"+AEmp_AdEdRe_TextF_FName.getText()+"','"+AEmp_AdEdRe_DateChooser_DOB.getDate()+"','"+gend+"','active')");
            JOptionPane.showMessageDialog(this, "Data saved");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AEmp_AdEdRe_TextF_NICnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_AdEdRe_TextF_NICnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AEmp_AdEdRe_TextF_NICnoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AEmp_AdEdRe_Btn_AddAll;
    private javax.swing.JButton AEmp_AdEdRe_Btn_AddEmp;
    private javax.swing.JButton AEmp_AdEdRe_Btn_EditEmp;
    private javax.swing.JButton AEmp_AdEdRe_Btn_RemoveAdded;
    private javax.swing.JButton AEmp_AdEdRe_Btn_RemoveEmp;
    private javax.swing.JComboBox<String> AEmp_AdEdRe_CmbBox_AccesLevel;
    private javax.swing.JComboBox<String> AEmp_AdEdRe_CmbBox_Position;
    private com.toedter.calendar.JDateChooser AEmp_AdEdRe_DateChooser_DOB;
    private javax.swing.JLabel AEmp_AdEdRe_Label_AccesLevel;
    private javax.swing.JLabel AEmp_AdEdRe_Label_Address_1;
    private javax.swing.JLabel AEmp_AdEdRe_Label_Address_2;
    private javax.swing.JLabel AEmp_AdEdRe_Label_ContNo;
    private javax.swing.JLabel AEmp_AdEdRe_Label_DOB;
    private javax.swing.JLabel AEmp_AdEdRe_Label_Email;
    private javax.swing.JLabel AEmp_AdEdRe_Label_EmpFName;
    private javax.swing.JLabel AEmp_AdEdRe_Label_EmpID;
    private javax.swing.JLabel AEmp_AdEdRe_Label_EmpLNICno;
    private javax.swing.JLabel AEmp_AdEdRe_Label_EmpLName;
    private javax.swing.JLabel AEmp_AdEdRe_Label_Gender;
    private javax.swing.JLabel AEmp_AdEdRe_Label_Position;
    private javax.swing.JRadioButton AEmp_AdEdRe_RBtn_GendFemale;
    private javax.swing.JRadioButton AEmp_AdEdRe_RBtn_GendMale;
    private javax.swing.JTable AEmp_AdEdRe_Table_Emp;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_Address_1;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_Address_2;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_ContNo;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_Email;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_EmpID;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_FName;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_LName;
    private javax.swing.JTextField AEmp_AdEdRe_TextF_NICno;
    private javax.swing.ButtonGroup AEmp_AdEd_BtnGroup_Gender;
    private javax.swing.JButton AEmp_Btn_Back;
    private javax.swing.JButton AEmp_Btn_Ok;
    private javax.swing.JLayeredPane AEmp_LPane_AdEdReEmp;
    private javax.swing.JLayeredPane AEmp_LPane_SearchEmp;
    private javax.swing.JLabel AEmp_Label_Heading;
    private javax.swing.JButton AEmp_Search_Btn_ShowAllEmp;
    private javax.swing.JCheckBox AEmp_Search_CheckBox_LeavedEmp;
    private javax.swing.JLabel AEmp_Search_Label_EmpID;
    private javax.swing.JLabel AEmp_Search_Label_EmpName;
    private javax.swing.JTable AEmp_Search_Table_Emp;
    private javax.swing.JTextField AEmp_Search_TextF_EmpID;
    private javax.swing.JTextField AEmp_Search_TextF_EmpName;
    private javax.swing.JScrollPane Emp_Scp_1;
    private javax.swing.JScrollPane Emp_Scp_2;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    private void set_position_cmbbox() {
        try {
            DefaultComboBoxModel cmbModelpos = (DefaultComboBoxModel) AEmp_AdEdRe_CmbBox_Position.getModel();
            ResultSet res_pos = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name FROM emp_pos_detail");
            while (res_pos.next()) {
                cmbModelpos.addElement(res_pos.getString("Emp_Pos_De_Name"));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void Clear() {
        AEmp_AdEdRe_TextF_EmpID.setText("");
        AEmp_AdEdRe_TextF_FName.setText("");
        AEmp_AdEdRe_TextF_LName.setText("");
        AEmp_AdEdRe_TextF_NICno.setText("");
        AEmp_AdEdRe_TextF_Address_1.setText("");
        AEmp_AdEdRe_TextF_Address_2.setText("");
        AEmp_AdEdRe_DateChooser_DOB.setDate(null);
        AEmp_AdEdRe_TextF_ContNo.setText("");
        AEmp_AdEdRe_TextF_Email.setText("");
        AEmp_AdEd_BtnGroup_Gender.clearSelection();
        AEmp_AdEdRe_CmbBox_Position.setSelectedIndex(0);
        AEmp_AdEdRe_CmbBox_AccesLevel.setSelectedIndex(0);
    }

    private void Update() {
        try {
            SimpleDateFormat dateFormatter = new SimpleDateFormat("dd MMMM yyyy");
            ConnectDB.DBConnection().createStatement().executeUpdate("UPDATE employee SET Emp_FName='" + AEmp_AdEdRe_TextF_FName.getText() + "', Emp_LName='" + AEmp_AdEdRe_TextF_LName.getText() + "', Emp_NIC_No='" + AEmp_AdEdRe_TextF_NICno.getText() + "', Emp_Address_1='" + AEmp_AdEdRe_TextF_Address_1.getText() + "', Emp_Address_2='" + AEmp_AdEdRe_TextF_Address_2.getText() + "', Emp_AccL='" + AEmp_AdEdRe_CmbBox_AccesLevel.getSelectedItem() + "', Emp_DOB='" + dateFormatter.format(AEmp_AdEdRe_DateChooser_DOB.getDate()) + "', Emp_Con_No='" + AEmp_AdEdRe_TextF_ContNo.getText() + "', Emp_Email='" + AEmp_AdEdRe_TextF_Email.getText() + "', Emp_Gender='" + ((AEmp_AdEdRe_RBtn_GendFemale.isSelected()) ? "Female" : (AEmp_AdEdRe_RBtn_GendMale.isSelected()) ? "Male" : " ") + "' WHERE Emp_ID='" + AEmp_AdEdRe_TextF_EmpID.getText() + "'");
            ResultSet resUpEmpPos = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_ID FROM emp_pos_detail WHERE Emp_Pos_De_Name='" + AEmp_AdEdRe_CmbBox_Position.getSelectedItem() + "'");
            while (resUpEmpPos.next()) {
                ConnectDB.DBConnection().createStatement().executeUpdate("UPDATE employee SET Emp_Pos_De_ID='" + resUpEmpPos.getString("Emp_Pos_De_ID") + "'WHERE Emp_ID='" + AEmp_AdEdRe_TextF_EmpID.getText() + "'");
            }
            JOptionPane.showMessageDialog(this, "Record edited successfully.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error\nTry Again..!", "Error", 0);
        }
    }

    private void Delete() {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("d MMM yyyy");
            ConnectDB.DBConnection().createStatement().executeUpdate("UPDATE employee SET Emp_Staus='" + 0 + "', Emp_Leaved_Date='" + dateFormat.format(Calendar.getInstance().getTime()) + "' WHERE Emp_ID='" + AEmp_AdEdRe_TextF_EmpID.getText() + "'");
            JOptionPane.showMessageDialog(this, "Record is deleted successfully.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error\nTry Again..!", "Error", 0);
        }
    }

    private void Refresh() {
        DefaultTableModel List_SearchT = (DefaultTableModel) AEmp_Search_Table_Emp.getModel();
        if (List_SearchT.getRowCount() > 0) {
            if (!AEmp_Search_TextF_EmpID.getText().equals("")) {
                try {
                    List_SearchT.setRowCount(0);
                    ResultSet resEmp = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee WHERE Emp_ID LIKE'" + AEmp_Search_TextF_EmpID.getText() + "%'");
                    while (resEmp.next()) {
                        if (resEmp.getString("Emp_Staus").equals("1") && !AEmp_Search_CheckBox_LeavedEmp.isSelected()) {//not leaved emp
                            Vector v = new Vector();
                            v.addElement(resEmp.getString("Emp_ID"));
                            v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                            v.addElement(resEmp.getString("Emp_NIC_No"));
                            v.addElement(resEmp.getString("Emp_Gender"));
                            v.addElement(resEmp.getString("Emp_Address_1"));
                            v.addElement(resEmp.getString("Emp_Address_2"));
                            v.addElement(resEmp.getString("Emp_DOB"));
                            v.addElement(resEmp.getString("Emp_Con_No"));
                            v.addElement(resEmp.getString("Emp_Email"));
                            v.addElement(resEmp.getString("Emp_AccL"));
                            ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                            while (resEmpPosDetail.next()) {
                                if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                    v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                                } else {
                                    v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                                }
                            }
                            v.addElement(resEmp.getString("Emp_Join_Date"));
                            v.addElement(resEmp.getString("Emp_Leaved_Date"));
                            List_SearchT.addRow(v);
                        } else if (resEmp.getString("Emp_Staus").equals("0") && AEmp_Search_CheckBox_LeavedEmp.isSelected()) {// elaved emp
                            Vector v = new Vector();
                            v.addElement(resEmp.getString("Emp_ID"));
                            v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                            v.addElement(resEmp.getString("Emp_NIC_No"));
                            v.addElement(resEmp.getString("Emp_Gender"));
                            v.addElement(resEmp.getString("Emp_Address_1"));
                            v.addElement(resEmp.getString("Emp_Address_2"));
                            v.addElement(resEmp.getString("Emp_DOB"));
                            v.addElement(resEmp.getString("Emp_Con_No"));
                            v.addElement(resEmp.getString("Emp_Email"));
                            v.addElement(resEmp.getString("Emp_AccL"));
                            ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                            while (resEmpPosDetail.next()) {
                                if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                    v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                                } else {
                                    v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                                }
                            }
                            v.addElement(resEmp.getString("Emp_Join_Date"));
                            v.addElement(resEmp.getString("Emp_Leaved_Date"));
                            List_SearchT.addRow(v);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else if (!AEmp_Search_TextF_EmpName.getText().equals("")) {
                try {
                    List_SearchT.setRowCount(0);
                    ResultSet resEmp = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee WHERE Emp_FName LIKE'" + AEmp_Search_TextF_EmpName.getText() + "%'OR Emp_LName LIKE'" + AEmp_Search_TextF_EmpName.getText() + "%'");
                    while (resEmp.next()) {
                        if (resEmp.getString("Emp_Staus").equals("1") && !AEmp_Search_CheckBox_LeavedEmp.isSelected()) {//not leaved emp
                            Vector v = new Vector();
                            v.addElement(resEmp.getString("Emp_ID"));
                            v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                            v.addElement(resEmp.getString("Emp_NIC_No"));
                            v.addElement(resEmp.getString("Emp_Gender"));
                            v.addElement(resEmp.getString("Emp_Address_1"));
                            v.addElement(resEmp.getString("Emp_Address_2"));
                            v.addElement(resEmp.getString("Emp_DOB"));
                            v.addElement(resEmp.getString("Emp_Con_No"));
                            v.addElement(resEmp.getString("Emp_Email"));
                            v.addElement(resEmp.getString("Emp_AccL"));
                            ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                            while (resEmpPosDetail.next()) {
                                if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                    v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                                } else {
                                    v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                                }
                            }
                            v.addElement(resEmp.getString("Emp_Join_Date"));
                            v.addElement(resEmp.getString("Emp_Leaved_Date"));
                            List_SearchT.addRow(v);
                        } else if (resEmp.getString("Emp_Staus").equals("0") && AEmp_Search_CheckBox_LeavedEmp.isSelected()) {// elaved emp
                            Vector v = new Vector();
                            v.addElement(resEmp.getString("Emp_ID"));
                            v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                            v.addElement(resEmp.getString("Emp_NIC_No"));
                            v.addElement(resEmp.getString("Emp_Gender"));
                            v.addElement(resEmp.getString("Emp_Address_1"));
                            v.addElement(resEmp.getString("Emp_Address_2"));
                            v.addElement(resEmp.getString("Emp_DOB"));
                            v.addElement(resEmp.getString("Emp_Con_No"));
                            v.addElement(resEmp.getString("Emp_Email"));
                            v.addElement(resEmp.getString("Emp_AccL"));
                            ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                            while (resEmpPosDetail.next()) {
                                if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                    v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                                } else {
                                    v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                                }
                            }
                            v.addElement(resEmp.getString("Emp_Join_Date"));
                            v.addElement(resEmp.getString("Emp_Leaved_Date"));
                            List_SearchT.addRow(v);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                try {
                    List_SearchT.setRowCount(0);
                    ResultSet resEmp = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM employee");
                    while (resEmp.next()) {
                        if (resEmp.getString("Emp_Staus").equals("1") && !AEmp_Search_CheckBox_LeavedEmp.isSelected()) {//not leaved emp
                            Vector v = new Vector();
                            v.addElement(resEmp.getString("Emp_ID"));
                            v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                            v.addElement(resEmp.getString("Emp_NIC_No"));
                            v.addElement(resEmp.getString("Emp_Gender"));
                            v.addElement(resEmp.getString("Emp_Address_1"));
                            v.addElement(resEmp.getString("Emp_Address_2"));
                            v.addElement(resEmp.getString("Emp_DOB"));
                            v.addElement(resEmp.getString("Emp_Con_No"));
                            v.addElement(resEmp.getString("Emp_Email"));
                            v.addElement(resEmp.getString("Emp_AccL"));
                            ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                            while (resEmpPosDetail.next()) {
                                if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                    v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                                } else {
                                    v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                                }
                            }
                            v.addElement(resEmp.getString("Emp_Join_Date"));
                            v.addElement(resEmp.getString("Emp_Leaved_Date"));
                            List_SearchT.addRow(v);
                        } else if (resEmp.getString("Emp_Staus").equals("0") && AEmp_Search_CheckBox_LeavedEmp.isSelected()) {// elaved emp
                            Vector v = new Vector();
                            v.addElement(resEmp.getString("Emp_ID"));
                            v.addElement(resEmp.getString("Emp_FName") + " " + resEmp.getString("Emp_LName"));
                            v.addElement(resEmp.getString("Emp_NIC_No"));
                            v.addElement(resEmp.getString("Emp_Gender"));
                            v.addElement(resEmp.getString("Emp_Address_1"));
                            v.addElement(resEmp.getString("Emp_Address_2"));
                            v.addElement(resEmp.getString("Emp_DOB"));
                            v.addElement(resEmp.getString("Emp_Con_No"));
                            v.addElement(resEmp.getString("Emp_Email"));
                            v.addElement(resEmp.getString("Emp_AccL"));
                            ResultSet resEmpPosDetail = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + resEmp.getString("Emp_Pos_De_ID") + "'");
                            while (resEmpPosDetail.next()) {
                                if (resEmpPosDetail.getString("Emp_Pos_De_Status").equals("1")) {
                                    v.addElement(resEmpPosDetail.getString("Emp_Pos_De_Name"));
                                } else {
                                    v.addElement("[-" + resEmpPosDetail.getString("Emp_Pos_De_Name") + "-]");
                                }
                            }
                            v.addElement(resEmp.getString("Emp_Join_Date"));
                            v.addElement(resEmp.getString("Emp_Leaved_Date"));
                            List_SearchT.addRow(v);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

}
