/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces.Admin;

import ConnectDB.ConnectDB;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class AEmpPos extends javax.swing.JPanel {

    /**
     * Creates new form AEmpPos
     */
    public AEmpPos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AEmpPos_Label_Heading = new javax.swing.JLabel();
        AEmpPos_LPane_SearchEmpPos = new javax.swing.JLayeredPane();
        AEmpPos_Search_Btn_ShowAllEmpPos = new javax.swing.JButton();
        AEmpPos_Search_Label_EmpPosID = new javax.swing.JLabel();
        AEmpPos_Search_Label_EmpPosName = new javax.swing.JLabel();
        CustStage_Scp_1 = new javax.swing.JScrollPane();
        AEmpPos_Search_Table_EmpPos = new javax.swing.JTable();
        AEmpPos_Search_TextF_EmpPosID = new javax.swing.JTextField();
        AEmpPos_Search_TextF_EmpPosName = new javax.swing.JTextField();
        AEmpPos_LPane_AdEdReEmpPos = new javax.swing.JLayeredPane();
        AEmpPos_AdEdRe_Label_EmpPosID = new javax.swing.JLabel();
        AEmpPos_AdEdRe_Label_EmpPosName = new javax.swing.JLabel();
        AEmpPos_AdEdRe_TextF_EmpPosID = new javax.swing.JTextField();
        AEmpPos_AdEdRe_TextF_EmpPosName = new javax.swing.JTextField();
        AEmpPos_AdEdRe_Btn_RemoveEmpPos = new javax.swing.JButton();
        AEmpPos_AdEdRe_Btn_AddEmpPos = new javax.swing.JButton();
        AEmpPos_AdEdRe_Btn_EditEmpPos = new javax.swing.JButton();
        CustStage_Scp_2 = new javax.swing.JScrollPane();
        AEmpPos_AdEdRe_Table_EmpPos = new javax.swing.JTable();
        AEmpPos_AdEdRe_Btn_RemoveAdded = new javax.swing.JButton();
        AEmpPos_AdEdRe_Btn_AddAll = new javax.swing.JButton();
        AEmpPos_AdEdRe_Label_EmpSalary = new javax.swing.JLabel();
        AEmpPos_AdEdRe_TextF_EmpSalary = new javax.swing.JTextField();
        AEmpPos_AdEdRe_Label_EmpBonus = new javax.swing.JLabel();
        AEmpPos_AdEdRe_TextF_EmpBonus = new javax.swing.JTextField();
        AEmpPos_AdEdRe_Label_EmpOTAmountForHour = new javax.swing.JLabel();
        AEmpPos_AdEdRe_TextF_EmpOTAmountForHour = new javax.swing.JTextField();
        AEmp_Btn_Back = new javax.swing.JButton();
        AEmp_Btn_Ok = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        AEmpPos_Label_Heading.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        AEmpPos_Label_Heading.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_Label_Heading.setText("Employee Positions");

        AEmpPos_LPane_SearchEmpPos.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Search Employee Positions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 11), new java.awt.Color(104, 2, 5))); // NOI18N
        AEmpPos_LPane_SearchEmpPos.setPreferredSize(new java.awt.Dimension(1052, 216));
        AEmpPos_LPane_SearchEmpPos.setVerifyInputWhenFocusTarget(false);

        AEmpPos_Search_Btn_ShowAllEmpPos.setBackground(new java.awt.Color(204, 204, 204));
        AEmpPos_Search_Btn_ShowAllEmpPos.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmpPos_Search_Btn_ShowAllEmpPos.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_Search_Btn_ShowAllEmpPos.setText("Show All Employee Positions");
        AEmpPos_Search_Btn_ShowAllEmpPos.setToolTipText("Show All Employee Positions");
        AEmpPos_Search_Btn_ShowAllEmpPos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_Search_Btn_ShowAllEmpPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpPos_Search_Btn_ShowAllEmpPosActionPerformed(evt);
            }
        });

        AEmpPos_Search_Label_EmpPosID.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_Search_Label_EmpPosID.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_Search_Label_EmpPosID.setText("Employee Position ID : ");

        AEmpPos_Search_Label_EmpPosName.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_Search_Label_EmpPosName.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_Search_Label_EmpPosName.setText("Position Name : ");

        AEmpPos_Search_Table_EmpPos.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_Search_Table_EmpPos.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_Search_Table_EmpPos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Position ID", "Position Name", "Bonus", "Salary", "OT Amount For Hour"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AEmpPos_Search_Table_EmpPos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_Search_Table_EmpPos.setGridColor(new java.awt.Color(102, 102, 102));
        AEmpPos_Search_Table_EmpPos.setIntercellSpacing(new java.awt.Dimension(1, 0));
        AEmpPos_Search_Table_EmpPos.setRowHeight(17);
        AEmpPos_Search_Table_EmpPos.setSelectionBackground(new java.awt.Color(46, 141, 216));
        AEmpPos_Search_Table_EmpPos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AEmpPos_Search_Table_EmpPos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AEmpPos_Search_Table_EmpPosMouseClicked(evt);
            }
        });
        CustStage_Scp_1.setViewportView(AEmpPos_Search_Table_EmpPos);

        AEmpPos_Search_TextF_EmpPosID.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_Search_TextF_EmpPosID.setToolTipText("Employee Position Name");
        AEmpPos_Search_TextF_EmpPosID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AEmpPos_Search_TextF_EmpPosIDKeyReleased(evt);
            }
        });

        AEmpPos_Search_TextF_EmpPosName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_Search_TextF_EmpPosName.setToolTipText("Employee Position Name");
        AEmpPos_Search_TextF_EmpPosName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AEmpPos_Search_TextF_EmpPosNameKeyReleased(evt);
            }
        });

        AEmpPos_LPane_SearchEmpPos.setLayer(AEmpPos_Search_Btn_ShowAllEmpPos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_SearchEmpPos.setLayer(AEmpPos_Search_Label_EmpPosID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_SearchEmpPos.setLayer(AEmpPos_Search_Label_EmpPosName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_SearchEmpPos.setLayer(CustStage_Scp_1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_SearchEmpPos.setLayer(AEmpPos_Search_TextF_EmpPosID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_SearchEmpPos.setLayer(AEmpPos_Search_TextF_EmpPosName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout AEmpPos_LPane_SearchEmpPosLayout = new javax.swing.GroupLayout(AEmpPos_LPane_SearchEmpPos);
        AEmpPos_LPane_SearchEmpPos.setLayout(AEmpPos_LPane_SearchEmpPosLayout);
        AEmpPos_LPane_SearchEmpPosLayout.setHorizontalGroup(
            AEmpPos_LPane_SearchEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                                .addComponent(AEmpPos_Search_Label_EmpPosName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AEmpPos_Search_TextF_EmpPosName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                                .addComponent(AEmpPos_Search_Label_EmpPosID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AEmpPos_Search_TextF_EmpPosID, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(AEmpPos_Search_Btn_ShowAllEmpPos)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CustStage_Scp_1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                .addContainerGap())
        );
        AEmpPos_LPane_SearchEmpPosLayout.setVerticalGroup(
            AEmpPos_LPane_SearchEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmpPos_Search_Label_EmpPosID)
                    .addComponent(AEmpPos_Search_TextF_EmpPosID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AEmpPos_Search_Label_EmpPosName)
                    .addComponent(AEmpPos_Search_TextF_EmpPosName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(AEmpPos_Search_Btn_ShowAllEmpPos)
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(AEmpPos_LPane_SearchEmpPosLayout.createSequentialGroup()
                .addComponent(CustStage_Scp_1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        AEmpPos_LPane_AdEdReEmpPos.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Add / Edit / Remove Employee Positions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 11), new java.awt.Color(104, 2, 5))); // NOI18N
        AEmpPos_LPane_AdEdReEmpPos.setPreferredSize(new java.awt.Dimension(1052, 216));
        AEmpPos_LPane_AdEdReEmpPos.setVerifyInputWhenFocusTarget(false);

        AEmpPos_AdEdRe_Label_EmpPosID.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Label_EmpPosID.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Label_EmpPosID.setText("Employee Position ID : ");

        AEmpPos_AdEdRe_Label_EmpPosName.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Label_EmpPosName.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Label_EmpPosName.setText("Position Name : ");

        AEmpPos_AdEdRe_TextF_EmpPosID.setEditable(false);
        AEmpPos_AdEdRe_TextF_EmpPosID.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_AdEdRe_TextF_EmpPosID.setToolTipText("Employee Position ID");

        AEmpPos_AdEdRe_TextF_EmpPosName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_AdEdRe_TextF_EmpPosName.setToolTipText("Employee Position Name");

        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setBackground(new java.awt.Color(204, 204, 204));
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/trash_bin.png"))); // NOI18N
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setText("Remove");
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setToolTipText("Remove Employee Position");
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpPos_AdEdRe_Btn_RemoveEmpPosActionPerformed(evt);
            }
        });

        AEmpPos_AdEdRe_Btn_AddEmpPos.setBackground(new java.awt.Color(204, 204, 204));
        AEmpPos_AdEdRe_Btn_AddEmpPos.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Btn_AddEmpPos.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Btn_AddEmpPos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/Add_plus.png"))); // NOI18N
        AEmpPos_AdEdRe_Btn_AddEmpPos.setText("Add");
        AEmpPos_AdEdRe_Btn_AddEmpPos.setToolTipText("Add Employee Position");
        AEmpPos_AdEdRe_Btn_AddEmpPos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_AdEdRe_Btn_AddEmpPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpPos_AdEdRe_Btn_AddEmpPosActionPerformed(evt);
            }
        });

        AEmpPos_AdEdRe_Btn_EditEmpPos.setBackground(new java.awt.Color(204, 204, 204));
        AEmpPos_AdEdRe_Btn_EditEmpPos.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Btn_EditEmpPos.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Btn_EditEmpPos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/Edit_pencil.png"))); // NOI18N
        AEmpPos_AdEdRe_Btn_EditEmpPos.setText("Edit");
        AEmpPos_AdEdRe_Btn_EditEmpPos.setToolTipText("Edit Employee Position");
        AEmpPos_AdEdRe_Btn_EditEmpPos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
        AEmpPos_AdEdRe_Btn_EditEmpPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpPos_AdEdRe_Btn_EditEmpPosActionPerformed(evt);
            }
        });

        AEmpPos_AdEdRe_Table_EmpPos.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_AdEdRe_Table_EmpPos.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Table_EmpPos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Position ID", "Position Name", "Salary", "Bonus", "OT Amount For Hour"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AEmpPos_AdEdRe_Table_EmpPos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_AdEdRe_Table_EmpPos.setGridColor(new java.awt.Color(102, 102, 102));
        AEmpPos_AdEdRe_Table_EmpPos.setIntercellSpacing(new java.awt.Dimension(1, 0));
        AEmpPos_AdEdRe_Table_EmpPos.setRowHeight(17);
        AEmpPos_AdEdRe_Table_EmpPos.setSelectionBackground(new java.awt.Color(46, 141, 216));
        AEmpPos_AdEdRe_Table_EmpPos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        CustStage_Scp_2.setViewportView(AEmpPos_AdEdRe_Table_EmpPos);

        AEmpPos_AdEdRe_Btn_RemoveAdded.setBackground(new java.awt.Color(204, 204, 204));
        AEmpPos_AdEdRe_Btn_RemoveAdded.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Btn_RemoveAdded.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Btn_RemoveAdded.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/trash_bin.png"))); // NOI18N
        AEmpPos_AdEdRe_Btn_RemoveAdded.setText("Remove");
        AEmpPos_AdEdRe_Btn_RemoveAdded.setToolTipText("Remove Added");
        AEmpPos_AdEdRe_Btn_RemoveAdded.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_AdEdRe_Btn_RemoveAdded.setEnabled(false);
        AEmpPos_AdEdRe_Btn_RemoveAdded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpPos_AdEdRe_Btn_RemoveAddedActionPerformed(evt);
            }
        });

        AEmpPos_AdEdRe_Btn_AddAll.setBackground(new java.awt.Color(204, 204, 204));
        AEmpPos_AdEdRe_Btn_AddAll.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Btn_AddAll.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Btn_AddAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Btn_icon/check.png"))); // NOI18N
        AEmpPos_AdEdRe_Btn_AddAll.setText("Add All");
        AEmpPos_AdEdRe_Btn_AddAll.setToolTipText("Add All");
        AEmpPos_AdEdRe_Btn_AddAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmpPos_AdEdRe_Btn_AddAll.setEnabled(false);
        AEmpPos_AdEdRe_Btn_AddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmpPos_AdEdRe_Btn_AddAllActionPerformed(evt);
            }
        });

        AEmpPos_AdEdRe_Label_EmpSalary.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Label_EmpSalary.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Label_EmpSalary.setText("Salary : ");

        AEmpPos_AdEdRe_TextF_EmpSalary.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_AdEdRe_TextF_EmpSalary.setToolTipText("Employee Salary");

        AEmpPos_AdEdRe_Label_EmpBonus.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Label_EmpBonus.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Label_EmpBonus.setText("Bonus : ");

        AEmpPos_AdEdRe_TextF_EmpBonus.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_AdEdRe_TextF_EmpBonus.setToolTipText("Employee Bonus");

        AEmpPos_AdEdRe_Label_EmpOTAmountForHour.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        AEmpPos_AdEdRe_Label_EmpOTAmountForHour.setForeground(new java.awt.Color(51, 51, 51));
        AEmpPos_AdEdRe_Label_EmpOTAmountForHour.setText("OT Amount For Hour : ");

        AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.setToolTipText("Employee OT Amount For Hour");

        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Label_EmpPosID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Label_EmpPosName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_TextF_EmpPosID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_TextF_EmpPosName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Btn_RemoveEmpPos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Btn_AddEmpPos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Btn_EditEmpPos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(CustStage_Scp_2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Btn_RemoveAdded, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Btn_AddAll, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Label_EmpSalary, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_TextF_EmpSalary, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Label_EmpBonus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_TextF_EmpBonus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_Label_EmpOTAmountForHour, javax.swing.JLayeredPane.DEFAULT_LAYER);
        AEmpPos_LPane_AdEdReEmpPos.setLayer(AEmpPos_AdEdRe_TextF_EmpOTAmountForHour, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout AEmpPos_LPane_AdEdReEmpPosLayout = new javax.swing.GroupLayout(AEmpPos_LPane_AdEdReEmpPos);
        AEmpPos_LPane_AdEdReEmpPos.setLayout(AEmpPos_LPane_AdEdReEmpPosLayout);
        AEmpPos_LPane_AdEdReEmpPosLayout.setHorizontalGroup(
            AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AEmpPos_AdEdRe_Label_EmpPosName)
                            .addComponent(AEmpPos_AdEdRe_Label_EmpPosID)
                            .addComponent(AEmpPos_AdEdRe_Label_EmpSalary)
                            .addComponent(AEmpPos_AdEdRe_Label_EmpBonus)
                            .addComponent(AEmpPos_AdEdRe_Label_EmpOTAmountForHour))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AEmpPos_AdEdRe_TextF_EmpPosID, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(AEmpPos_AdEdRe_TextF_EmpPosName)
                            .addComponent(AEmpPos_AdEdRe_TextF_EmpSalary)
                            .addComponent(AEmpPos_AdEdRe_TextF_EmpBonus)
                            .addComponent(AEmpPos_AdEdRe_TextF_EmpOTAmountForHour)))
                    .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(AEmpPos_AdEdRe_Btn_AddEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEmpPos_AdEdRe_Btn_EditEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AEmpPos_AdEdRe_Btn_RemoveEmpPos)))
                .addGap(18, 18, 18)
                .addComponent(CustStage_Scp_2, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AEmpPos_AdEdRe_Btn_RemoveAdded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AEmpPos_AdEdRe_Btn_AddAll, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        AEmpPos_LPane_AdEdReEmpPosLayout.setVerticalGroup(
            AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpPos_AdEdRe_TextF_EmpPosID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Label_EmpPosID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpPos_AdEdRe_TextF_EmpPosName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Label_EmpPosName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpPos_AdEdRe_TextF_EmpSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Label_EmpSalary))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpPos_AdEdRe_TextF_EmpBonus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Label_EmpBonus))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpPos_AdEdRe_TextF_EmpOTAmountForHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Label_EmpOTAmountForHour))
                                .addGap(18, 18, 18)
                                .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AEmpPos_AdEdRe_Btn_AddEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Btn_EditEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AEmpPos_AdEdRe_Btn_RemoveEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 9, Short.MAX_VALUE))
                            .addGroup(AEmpPos_LPane_AdEdReEmpPosLayout.createSequentialGroup()
                                .addComponent(AEmpPos_AdEdRe_Btn_RemoveAdded)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AEmpPos_AdEdRe_Btn_AddAll, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))))
                    .addComponent(CustStage_Scp_2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        AEmp_Btn_Back.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_Btn_Back.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmp_Btn_Back.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Btn_Back.setText("Back");
        AEmp_Btn_Back.setToolTipText("Back");
        AEmp_Btn_Back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_Btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_Btn_BackActionPerformed(evt);
            }
        });

        AEmp_Btn_Ok.setBackground(new java.awt.Color(204, 204, 204));
        AEmp_Btn_Ok.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        AEmp_Btn_Ok.setForeground(new java.awt.Color(51, 51, 51));
        AEmp_Btn_Ok.setText("Ok");
        AEmp_Btn_Ok.setToolTipText("Ok");
        AEmp_Btn_Ok.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AEmp_Btn_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AEmp_Btn_OkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(426, 426, 426)
                .addComponent(AEmpPos_Label_Heading)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AEmpPos_LPane_SearchEmpPos, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE)
                    .addComponent(AEmpPos_LPane_AdEdReEmpPos, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AEmp_Btn_Back)
                        .addGap(6, 6, 6)
                        .addComponent(AEmp_Btn_Ok)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AEmpPos_Label_Heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AEmpPos_LPane_SearchEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AEmpPos_LPane_AdEdReEmpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AEmp_Btn_Back)
                    .addComponent(AEmp_Btn_Ok))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AEmpPos_Search_Btn_ShowAllEmpPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpPos_Search_Btn_ShowAllEmpPosActionPerformed
        Clear();
        AEmpPos_Search_TextF_EmpPosID.setText("");
        AEmpPos_Search_TextF_EmpPosName.setText("");
        try {
            DefaultTableModel List_AdvType = (DefaultTableModel) AEmpPos_Search_Table_EmpPos.getModel();
            List_AdvType.setRowCount(0);
            ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM emp_pos_detail");
            while (res.next()) {
                Vector v = new Vector();
                int status = Integer.parseInt(res.getString("Emp_Pos_De_Status"));
                if (status == 1) {
                    v.addElement(res.getString("Emp_Pos_De_ID"));
                    v.addElement(res.getString("Emp_Pos_De_Name"));
                    v.addElement(res.getString("Emp_Pos_De_Bonus"));
                    v.addElement(res.getString("Emp_Pos_De_Salary"));
                    v.addElement(res.getString("Emp_Pos_De_Ot_for_hour"));
                    List_AdvType.addRow(v);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        a = 0;
        AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
    }//GEN-LAST:event_AEmpPos_Search_Btn_ShowAllEmpPosActionPerformed

    private void AEmpPos_AdEdRe_Btn_RemoveEmpPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpPos_AdEdRe_Btn_RemoveEmpPosActionPerformed
        if (!(AEmpPos_AdEdRe_TextF_EmpPosID.getText().equals("")) && AEmpPos_AdEdRe_TextF_EmpPosID.getText() != null) {
            int d = JOptionPane.showConfirmDialog(this, "Do you want to delete this record ?", "Are You Sure ?", 0, 3);
            if (d == 0) {
                Delete();
                Refresh();
            }
        }
        AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
        AEmpPos_Search_Table_EmpPos.setRowSelectionAllowed(false);
        Clear();
    }//GEN-LAST:event_AEmpPos_AdEdRe_Btn_RemoveEmpPosActionPerformed

    private void AEmpPos_AdEdRe_Btn_EditEmpPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpPos_AdEdRe_Btn_EditEmpPosActionPerformed
        if (!(AEmpPos_AdEdRe_TextF_EmpPosID.getText().equals("")) && AEmpPos_AdEdRe_TextF_EmpPosID.getText() != null) {
            if (!(AEmpPos_AdEdRe_TextF_EmpPosName.getText().equals("")) && AEmpPos_AdEdRe_TextF_EmpPosName.getText() != null) {
                // check for duplicate name entry
                DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmpPos_AdEdRe_Table_EmpPos.getModel();
                int check = 0;
                if (AdEdReTblModel.getRowCount() > 0) {
                    for (int i = 0; i < AdEdReTblModel.getRowCount(); i++) {
                        if (AdEdReTblModel.getValueAt(i, 1).equals(AEmpPos_AdEdRe_TextF_EmpPosName.getText())) {
                            check = 2;
                        }
                    }
                }
                //////////////////////////////////
                if (check == 0) {
                    int u = JOptionPane.showConfirmDialog(this, "Do you want to update this Record ?", "Are You Sure ?", 0, 3);
                    if (u == 0) {
                        Update_Query();
                        Refresh();
                    }
                    AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
                    AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
                    AEmpPos_Search_Table_EmpPos.setRowSelectionAllowed(false);
                    Clear();
                } else {
                    JOptionPane.showMessageDialog(this, "Duplicate entry for employee position name", "Error", 0);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Employee position name field is empty", "Error", 0);
            }
        }
    }//GEN-LAST:event_AEmpPos_AdEdRe_Btn_EditEmpPosActionPerformed

    private void AEmpPos_AdEdRe_Btn_RemoveAddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpPos_AdEdRe_Btn_RemoveAddedActionPerformed
        DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmpPos_AdEdRe_Table_EmpPos.getModel();
        int[] indexes = AEmpPos_AdEdRe_Table_EmpPos.getSelectedRows();
        int res = 0;
        for (int i = 0; i < indexes.length; i++) {
            res += (i > 0) ? (indexes[i] - indexes[i - 1] - 1) : 0;
            int index = AEmpPos_AdEdRe_Table_EmpPos.convertColumnIndexToModel(indexes[0] + res);
            AdEdReTblModel.removeRow(index);
        }
        if (AdEdReTblModel.getRowCount() == 0) {
            AEmpPos_AdEdRe_Btn_AddAll.setEnabled(false);
            AEmpPos_AdEdRe_Btn_RemoveAdded.setEnabled(false);
        }
    }//GEN-LAST:event_AEmpPos_AdEdRe_Btn_RemoveAddedActionPerformed

    private void AEmpPos_AdEdRe_Btn_AddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpPos_AdEdRe_Btn_AddAllActionPerformed
        DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmpPos_AdEdRe_Table_EmpPos.getModel();
        try {
            int i = 0;
            //System.out.println(AdEdReTblModel.getRowCount());
            while (i < AdEdReTblModel.getRowCount()) {
                ConnectDB.DBConnection().createStatement().executeUpdate("INSERT INTO emp_pos_detail VALUES('" + AdEdReTblModel.getValueAt(i, 0) + "','" + AdEdReTblModel.getValueAt(i, 1) + "','" + AdEdReTblModel.getValueAt(i, 2) + "','" + AdEdReTblModel.getValueAt(i, 3) + "','" + AdEdReTblModel.getValueAt(i, 4) + "','" + 1 + "')");
                i++;
            }
            JOptionPane.showMessageDialog(this, "Records added succesfully");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        Refresh();
        a = 0;
        ID = 1;
        AdEdReTblModel.setRowCount(0);
        if (AdEdReTblModel.getRowCount() == 0) {
            AEmpPos_AdEdRe_Btn_RemoveAdded.setEnabled(false);
            AEmpPos_AdEdRe_Btn_AddAll.setEnabled(false);
        }
    }//GEN-LAST:event_AEmpPos_AdEdRe_Btn_AddAllActionPerformed

    private void AEmp_Btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_Btn_BackActionPerformed
        // TODSup_Label_Headingcode here:
    }//GEN-LAST:event_AEmp_Btn_BackActionPerformed

    private void AEmp_Btn_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmp_Btn_OkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AEmp_Btn_OkActionPerformed

    private int a = 0;
    private int b = 0;
    private int clear = 0;
    private int ID = 1;
    private void AEmpPos_AdEdRe_Btn_AddEmpPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AEmpPos_AdEdRe_Btn_AddEmpPosActionPerformed
        AEmpPos_Search_Table_EmpPos.setRowSelectionAllowed(false);
        try {
            DefaultTableModel AdEdReTblModel = (DefaultTableModel) AEmpPos_AdEdRe_Table_EmpPos.getModel();
            ResultSet res_1 = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_ID,Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail");
            if (!res_1.next()) {// if no records in table
                if (b == 0) {// first record
                    AEmpPos_AdEdRe_TextF_EmpPosID.setText("" + ID);
                    b = 1;
                } else if (b == 1) {//next records
                    if (!((AEmpPos_AdEdRe_TextF_EmpPosName.getText().equals("")) || (AEmpPos_AdEdRe_TextF_EmpPosName.getText() == null))) {//check that name field empty
                        // check for duplicate name entry
                        int check = 0;
                        while (res_1.next()) {
                            if (AEmpPos_AdEdRe_TextF_EmpPosName.getText().equals(res_1.getString("Emp_Pos_De_Name")) && res_1.getString("Emp_Pos_De_Status").equals("1")) {
                                check = 1;
                            }
                        }
                        if (AdEdReTblModel.getRowCount() > 0) {
                            for (int i = 0; i < AdEdReTblModel.getRowCount(); i++) {
                                if (AdEdReTblModel.getValueAt(i, 1).equals(AEmpPos_AdEdRe_TextF_EmpPosName.getText())) {
                                    check = 1;
                                }
                            }
                        }
                        //////////////////////////////////
                        if (check == 0) {
                            Vector v = new Vector();// Add to AdEdRe Table
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpPosID.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpPosName.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpSalary.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpBonus.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.getText());
                            AdEdReTblModel.addRow(v);
                            ID++;// ID increment
                            Clear();
                            AEmpPos_AdEdRe_TextF_EmpPosID.setText("" + ID);
                        } else {
                            JOptionPane.showMessageDialog(this, "Duplicate entry for employee position name", "Error", 0);
                        }
                    } else {//if bill type name field empty
                        JOptionPane.showMessageDialog(this, "Employee position name field is empty", "Error", 0);
                    }
                }
            } else {//if table filled with data
                if (a == 0) {// check text fields not empty // for the first set of data to table
                    if (clear == 0) { //// clear text fields data from search table
                        Clear();
                        clear = 1;
                    }
                    if (AdEdReTblModel.getRowCount() == 0) {
                        res_1.last();// get last ID no
                        ID = Integer.parseInt(res_1.getString("Emp_Pos_De_ID"));
                        ID++;// ID increment
                        //System.out.println(ID);
                        AEmpPos_AdEdRe_TextF_EmpPosID.setText("" + ID);
                    } else {
                        ID = Integer.parseInt((String) AdEdReTblModel.getValueAt(AdEdReTblModel.getRowCount() - 1, 0));// get ID last ID no in AdEdRe Table
                        ID++;//ID increment
                        AEmpPos_AdEdRe_TextF_EmpPosID.setText("" + ID);
                    }
                    a = 1;
                } else if (a == 1) {// if first data set added to db
                    if (!((AEmpPos_AdEdRe_TextF_EmpPosName.getText().equals("")) || (AEmpPos_AdEdRe_TextF_EmpPosName.getText() == null))) {
                        ResultSet res_2 = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_ID,Emp_Pos_De_Name,Emp_Pos_De_Status FROM emp_pos_detail");
                        // check for duplicate name entry
                        int check = 0;
                        while (res_2.next()) {
                            if (AEmpPos_AdEdRe_TextF_EmpPosName.getText().equals(res_2.getString("Emp_Pos_De_Name")) && res_2.getString("Emp_Pos_De_Status").equals("1")) {
                                check = 1;
                            }
                        }
                        if (AdEdReTblModel.getRowCount() > 0) {
                            for (int i = 0; i < AdEdReTblModel.getRowCount(); i++) {
                                if (AdEdReTblModel.getValueAt(i, 1).equals(AEmpPos_AdEdRe_TextF_EmpPosName.getText())) {
                                    check = 1;
                                }
                            }
                        }
                        //////////////////////////////////////
                        if (check == 0) {
                            Vector v = new Vector();
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpPosID.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpPosName.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpSalary.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpBonus.getText());
                            v.addElement(AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.getText());
                            AdEdReTblModel.addRow(v);
                            ID++;
                            Clear();
                            AEmpPos_AdEdRe_TextF_EmpPosID.setText("" + ID);
                        } else {
                            JOptionPane.showMessageDialog(this, "Duplicate entry for employee position name", "Error", 0);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Employee position name field is empty", "Error", 0);
                    }
                }
            }
            clear = 2;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////
            if (AdEdReTblModel.getRowCount() > 0) {
                AEmpPos_AdEdRe_Btn_RemoveAdded.setEnabled(true);
                AEmpPos_AdEdRe_Btn_AddAll.setEnabled(true);
            }
            AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
            AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_AEmpPos_AdEdRe_Btn_AddEmpPosActionPerformed

    private void AEmpPos_Search_TextF_EmpPosIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmpPos_Search_TextF_EmpPosIDKeyReleased
        AEmpPos_Search_TextF_EmpPosName.setText("");
        DefaultTableModel List_AdvType = (DefaultTableModel) AEmpPos_Search_Table_EmpPos.getModel();
        try {
            if (!(AEmpPos_Search_TextF_EmpPosID.getText().equals("")) || AEmpPos_Search_TextF_EmpPosID.getText() == null) {
                List_AdvType.setRowCount(0);
                ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM emp_pos_detail WHERE Emp_Pos_De_ID LIKE'" + AEmpPos_Search_TextF_EmpPosID.getText() + "%'");
                while (res.next()) {
                    Vector v = new Vector();
                    int status = Integer.parseInt(res.getString("Emp_Pos_De_Status"));
                    if (status == 1) {
                        v.addElement(res.getString("Emp_Pos_De_ID"));
                        v.addElement(res.getString("Emp_Pos_De_Name"));
                        v.addElement(res.getString("Emp_Pos_De_Bonus"));
                        v.addElement(res.getString("Emp_Pos_De_Salary"));
                        v.addElement(res.getString("Emp_Pos_De_Ot_for_hour"));
                        List_AdvType.addRow(v);
                    }
                }
            }
            Clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        a = 0;
        AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
    }//GEN-LAST:event_AEmpPos_Search_TextF_EmpPosIDKeyReleased

    private void AEmpPos_Search_TextF_EmpPosNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AEmpPos_Search_TextF_EmpPosNameKeyReleased
        AEmpPos_Search_TextF_EmpPosID.setText("");
        DefaultTableModel List_AdvType = (DefaultTableModel) AEmpPos_Search_Table_EmpPos.getModel();
        try {
            if (!(AEmpPos_Search_TextF_EmpPosName.getText().equals("")) || AEmpPos_Search_TextF_EmpPosName.getText() == null) {
                List_AdvType.setRowCount(0);
                ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM emp_pos_detail WHERE Emp_Pos_De_Name LIKE'" + AEmpPos_Search_TextF_EmpPosName.getText() + "%'");
                while (res.next()) {
                    Vector v = new Vector();
                    int status = Integer.parseInt(res.getString("Emp_Pos_De_Status"));
                    if (status == 1) {
                        v.addElement(res.getString("Emp_Pos_De_ID"));
                        v.addElement(res.getString("Emp_Pos_De_Name"));
                        v.addElement(res.getString("Emp_Pos_De_Bonus"));
                        v.addElement(res.getString("Emp_Pos_De_Salary"));
                        v.addElement(res.getString("Emp_Pos_De_Ot_for_hour"));
                        List_AdvType.addRow(v);
                    }
                }
            }
            Clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        a = 0;
        AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(false);
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(false);
    }//GEN-LAST:event_AEmpPos_Search_TextF_EmpPosNameKeyReleased

    private void AEmpPos_Search_Table_EmpPosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AEmpPos_Search_Table_EmpPosMouseClicked
        AEmpPos_Search_Table_EmpPos.setRowSelectionAllowed(true);
        try {
            ResultSet List_ToAdEdRe = ConnectDB.DBConnection().createStatement().executeQuery("SELECT Emp_Pos_De_ID, Emp_Pos_De_Name, Emp_Pos_De_Salary, Emp_Pos_De_Bonus, Emp_Pos_De_Ot_for_hour FROM emp_pos_detail WHERE Emp_Pos_De_ID='" + (String) AEmpPos_Search_Table_EmpPos.getValueAt(AEmpPos_Search_Table_EmpPos.getSelectedRow(), 0) + "'");
            while (List_ToAdEdRe.next()) {
                AEmpPos_AdEdRe_TextF_EmpPosID.setText(List_ToAdEdRe.getString("Emp_Pos_De_ID"));
                AEmpPos_AdEdRe_TextF_EmpPosName.setText(List_ToAdEdRe.getString("Emp_Pos_De_Name"));
                AEmpPos_AdEdRe_TextF_EmpSalary.setText(List_ToAdEdRe.getString("Emp_Pos_De_Salary"));
                AEmpPos_AdEdRe_TextF_EmpBonus.setText(List_ToAdEdRe.getString("Emp_Pos_De_Bonus"));
                AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.setText(List_ToAdEdRe.getString("Emp_Pos_De_Ot_for_hour"));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        AEmpPos_AdEdRe_Btn_EditEmpPos.setEnabled(true);
        AEmpPos_AdEdRe_Btn_RemoveEmpPos.setEnabled(true);
        clear = 0;
        a = 0;
    }//GEN-LAST:event_AEmpPos_Search_Table_EmpPosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AEmpPos_AdEdRe_Btn_AddAll;
    private javax.swing.JButton AEmpPos_AdEdRe_Btn_AddEmpPos;
    private javax.swing.JButton AEmpPos_AdEdRe_Btn_EditEmpPos;
    private javax.swing.JButton AEmpPos_AdEdRe_Btn_RemoveAdded;
    private javax.swing.JButton AEmpPos_AdEdRe_Btn_RemoveEmpPos;
    private javax.swing.JLabel AEmpPos_AdEdRe_Label_EmpBonus;
    private javax.swing.JLabel AEmpPos_AdEdRe_Label_EmpOTAmountForHour;
    private javax.swing.JLabel AEmpPos_AdEdRe_Label_EmpPosID;
    private javax.swing.JLabel AEmpPos_AdEdRe_Label_EmpPosName;
    private javax.swing.JLabel AEmpPos_AdEdRe_Label_EmpSalary;
    private javax.swing.JTable AEmpPos_AdEdRe_Table_EmpPos;
    private javax.swing.JTextField AEmpPos_AdEdRe_TextF_EmpBonus;
    private javax.swing.JTextField AEmpPos_AdEdRe_TextF_EmpOTAmountForHour;
    private javax.swing.JTextField AEmpPos_AdEdRe_TextF_EmpPosID;
    private javax.swing.JTextField AEmpPos_AdEdRe_TextF_EmpPosName;
    private javax.swing.JTextField AEmpPos_AdEdRe_TextF_EmpSalary;
    private javax.swing.JLayeredPane AEmpPos_LPane_AdEdReEmpPos;
    private javax.swing.JLayeredPane AEmpPos_LPane_SearchEmpPos;
    private javax.swing.JLabel AEmpPos_Label_Heading;
    private javax.swing.JButton AEmpPos_Search_Btn_ShowAllEmpPos;
    private javax.swing.JLabel AEmpPos_Search_Label_EmpPosID;
    private javax.swing.JLabel AEmpPos_Search_Label_EmpPosName;
    private javax.swing.JTable AEmpPos_Search_Table_EmpPos;
    private javax.swing.JTextField AEmpPos_Search_TextF_EmpPosID;
    private javax.swing.JTextField AEmpPos_Search_TextF_EmpPosName;
    private javax.swing.JButton AEmp_Btn_Back;
    private javax.swing.JButton AEmp_Btn_Ok;
    private javax.swing.JScrollPane CustStage_Scp_1;
    private javax.swing.JScrollPane CustStage_Scp_2;
    // End of variables declaration//GEN-END:variables

    private void Clear() {
        AEmpPos_AdEdRe_TextF_EmpPosID.setText("");
        AEmpPos_AdEdRe_TextF_EmpPosName.setText("");
        AEmpPos_AdEdRe_TextF_EmpSalary.setText("");
        AEmpPos_AdEdRe_TextF_EmpBonus.setText("");
        AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.setText("");
    }

    private void Update_Query() {
        try {
            ConnectDB.DBConnection().createStatement().executeUpdate("UPDATE emp_pos_detail SET Emp_Pos_De_Name='" + AEmpPos_AdEdRe_TextF_EmpPosName.getText() + "', Emp_Pos_De_Salary='" + AEmpPos_AdEdRe_TextF_EmpSalary.getText() + "', Emp_Pos_De_Bonus='" + AEmpPos_AdEdRe_TextF_EmpBonus.getText() + "', Emp_Pos_De_Ot_for_hour='" + AEmpPos_AdEdRe_TextF_EmpOTAmountForHour.getText() + "'WHERE Emp_Pos_De_ID='" + AEmpPos_AdEdRe_TextF_EmpPosID.getText() + "'");
            JOptionPane.showMessageDialog(this, "Record edited successfully.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error\nTry Again..!", "Error", 0);
        }
    }

    private void Delete() {
        try {
            ConnectDB.DBConnection().createStatement().executeUpdate("UPDATE emp_pos_detail SET Emp_Pos_De_Status='" + 0 + "' WHERE Emp_Pos_De_ID='" + AEmpPos_AdEdRe_TextF_EmpPosID.getText() + "'");
            JOptionPane.showMessageDialog(this, "Record is deleted successfully.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error\nTry Again..!", "Error", 0);
        }
    }

    private void Refresh() {
        DefaultTableModel List_EPos = (DefaultTableModel) AEmpPos_Search_Table_EmpPos.getModel();
        if (List_EPos.getRowCount() > 0) {
            if (!AEmpPos_Search_TextF_EmpPosID.getText().equals("")) {
                try {
                    List_EPos.setRowCount(0);
                    ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM emp_pos_detail WHERE Emp_Pos_De_ID LIKE'" + AEmpPos_Search_TextF_EmpPosID.getText() + "%'");
                    while (res.next()) {
                        Vector v = new Vector();
                        int status = Integer.parseInt(res.getString("Emp_Pos_De_Status"));
                        if (status == 1) {
                            v.addElement(res.getString("Emp_Pos_De_ID"));
                            v.addElement(res.getString("Emp_Pos_De_Name"));
                            v.addElement(res.getString("Emp_Pos_De_Bonus"));
                            v.addElement(res.getString("Emp_Pos_De_Salary"));
                            v.addElement(res.getString("Emp_Pos_De_Ot_for_hour"));
                            List_EPos.addRow(v);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else if (!AEmpPos_Search_TextF_EmpPosName.getText().equals("")) {
                try {
                    List_EPos.setRowCount(0);
                    ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM emp_pos_detail WHERE Emp_Pos_De_Name LIKE'" + AEmpPos_Search_TextF_EmpPosName.getText() + "%'");
                    while (res.next()) {
                        Vector v = new Vector();
                        int status = Integer.parseInt(res.getString("Emp_Pos_De_Status"));
                        if (status == 1) {
                            v.addElement(res.getString("Emp_Pos_De_ID"));
                            v.addElement(res.getString("Emp_Pos_De_Name"));
                            v.addElement(res.getString("Emp_Pos_De_Bonus"));
                            v.addElement(res.getString("Emp_Pos_De_Salary"));
                            v.addElement(res.getString("Emp_Pos_De_Ot_for_hour"));
                            List_EPos.addRow(v);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                try {
                    List_EPos.setRowCount(0);
                    ResultSet res = ConnectDB.DBConnection().createStatement().executeQuery("SELECT* FROM emp_pos_detail");
                    while (res.next()) {
                        Vector v = new Vector();
                        int status = Integer.parseInt(res.getString("Emp_Pos_De_Status"));
                        if (status == 1) {
                            v.addElement(res.getString("Emp_Pos_De_ID"));
                            v.addElement(res.getString("Emp_Pos_De_Name"));
                            v.addElement(res.getString("Emp_Pos_De_Bonus"));
                            v.addElement(res.getString("Emp_Pos_De_Salary"));
                            v.addElement(res.getString("Emp_Pos_De_Ot_for_hour"));
                            List_EPos.addRow(v);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
}
